{
    "sourceFile": "VerifyPro/IDGenie/models.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 42,
            "patches": [
                {
                    "date": 1733567775173,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1733897612126,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,31 @@\n from django.db import models\n-\n+from django.contrib.auth.models import User # For author field\n # Create your models here.\n \n \n class BlogPost(models.Model):\n-    title = models.CharField(max_length=200)\n+    title = models.CharField(max_length=255) # Title of the blog post\n+    content = models.TextField() # Content of the blog post\n+    image = models.ImageField(upload_to='blog_images/', null=True, blank=True) # Blog image (optional)\n+    quote_or_video = models.TextField(blank=True, null=True) # Can store either a quote or a video embed code\n+    author = models.ForeignKey(User, on_delete=models.CASCADE) # To associate with the user who posted\n+    \n+    # Automatically order the blog posts by creation date\n+    created_at = models.DateTimeField(auto_now_add=True, null=True)\n+\n+    def __str__(self):\n+        return self.title\n+    \n+    def get_recent_posts(self):\n+        \"\"\"Method to fetch recent blog posts. \"\"\"\n+        return BlogPost.objects.order_by('-created_at')[:5] # Adjust the number as needed\n+    \n+class Comment(models.Model):\n+    blog_post = models.ForeignKey(BlogPost, related_name='comments', on_delete=models.CASCADE)\n+    name = models.CharField(max_length=100)\n+    email = models.EmailField()\n     content = models.TextField()\n     created_at = models.DateTimeField(auto_now_add=True)\n-\n+    \n     def __str__(self):\n-        return self.title\n+        return f\"Comment by {self.name} on {self.blog_post.title}\"\n\\ No newline at end of file\n"
                },
                {
                    "date": 1733897636159,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n # Create your models here.\n \n \n class BlogPost(models.Model):\n-    title = models.CharField(max_length=255) # Title of the blog post\n+    title = models.CharField(max_length=255, null=True) # Title of the blog post\n     content = models.TextField() # Content of the blog post\n     image = models.ImageField(upload_to='blog_images/', null=True, blank=True) # Blog image (optional)\n     quote_or_video = models.TextField(blank=True, null=True) # Can store either a quote or a video embed code\n     author = models.ForeignKey(User, on_delete=models.CASCADE) # To associate with the user who posted\n"
                },
                {
                    "date": 1733897672690,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n     title = models.CharField(max_length=255, null=True) # Title of the blog post\n     content = models.TextField() # Content of the blog post\n     image = models.ImageField(upload_to='blog_images/', null=True, blank=True) # Blog image (optional)\n     quote_or_video = models.TextField(blank=True, null=True) # Can store either a quote or a video embed code\n-    author = models.ForeignKey(User, on_delete=models.CASCADE) # To associate with the user who posted\n+    author = models.ForeignKey(User, on_delete=models.CASCADE, null=True) # To associate with the user who posted\n     \n     # Automatically order the blog posts by creation date\n     created_at = models.DateTimeField(auto_now_add=True, null=True)\n \n"
                },
                {
                    "date": 1734213026555,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,30 +2,31 @@\n from django.contrib.auth.models import User # For author field\n # Create your models here.\n \n \n+# BlogPost Model\n class BlogPost(models.Model):\n-    title = models.CharField(max_length=255, null=True) # Title of the blog post\n-    content = models.TextField() # Content of the blog post\n-    image = models.ImageField(upload_to='blog_images/', null=True, blank=True) # Blog image (optional)\n-    quote_or_video = models.TextField(blank=True, null=True) # Can store either a quote or a video embed code\n-    author = models.ForeignKey(User, on_delete=models.CASCADE, null=True) # To associate with the user who posted\n+    title = models.CharField(max_length=200)\n+    content = models.TextField() # Main content of the blog\n+    quote = models.TextField(blank=True, null=True) # Optional quote section\n+    image = models.ImageField(upload_to='blog_images/', blank=True, null=True) # Optional image\n+    video_url = models.URLField(blank=True, null=True) # Optional video URL (for embedding)\n+    created_at = models.DateTimeField(auto_now_add=True) # Timestamp when the post is created\n+    updated_at = models.DateTimeField(auto_now=True) # Timestamp when the post is last updated\n+    author = models.ForeignKey(User, on_delete=models.CASCADE) # Author of the post\n     \n-    # Automatically order the blog posts by creation date\n-    created_at = models.DateTimeField(auto_now_add=True, null=True)\n-\n     def __str__(self):\n         return self.title\n     \n-    def get_recent_posts(self):\n-        \"\"\"Method to fetch recent blog posts. \"\"\"\n-        return BlogPost.objects.order_by('-created_at')[:5] # Adjust the number as needed\n     \n\\ No newline at end of file\n+\n+# Comment Model for blog posts\n class Comment(models.Model):\n     blog_post = models.ForeignKey(BlogPost, related_name='comments', on_delete=models.CASCADE)\n-    name = models.CharField(max_length=100)\n-    email = models.EmailField()\n-    content = models.TextField()\n-    created_at = models.DateTimeField(auto_now_add=True)\n+    author = models.CharField(max_length=100)\n+    text = models.TextField()\n+    created_at = models.DateTimeField(auto_now_add=True) # Timestamp when the post is created\n     \n+    \n     def __str__(self):\n-        return f\"Comment by {self.name} on {self.blog_post.title}\"\n+        return f\"Comment by {self.author}\"\n+    \n\\ No newline at end of file\n"
                },
                {
                    "date": 1734472257905,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,11 +9,11 @@\n     content = models.TextField() # Main content of the blog\n     quote = models.TextField(blank=True, null=True) # Optional quote section\n     image = models.ImageField(upload_to='blog_images/', blank=True, null=True) # Optional image\n     video_url = models.URLField(blank=True, null=True) # Optional video URL (for embedding)\n+    author = models.ForeignKey(User, on_delete=models.CASCADE) # Author of the post\n     created_at = models.DateTimeField(auto_now_add=True) # Timestamp when the post is created\n     updated_at = models.DateTimeField(auto_now=True) # Timestamp when the post is last updated\n-    author = models.ForeignKey(User, on_delete=models.CASCADE) # Author of the post\n     \n     def __str__(self):\n         return self.title\n     \n@@ -21,12 +21,12 @@\n \n # Comment Model for blog posts\n class Comment(models.Model):\n     blog_post = models.ForeignKey(BlogPost, related_name='comments', on_delete=models.CASCADE)\n-    author = models.CharField(max_length=100)\n-    text = models.TextField()\n+    name = models.CharField(max_length=100)\n+    content = models.TextField()\n     created_at = models.DateTimeField(auto_now_add=True) # Timestamp when the post is created\n+    approved = models.BooleanField(default=False)\n     \n     \n\\ No newline at end of file\n     def __str__(self):\n-        return f\"Comment by {self.author}\"\n-    \n+        return f\"Comment by {self.name} on {self.blog_post.title}\"\n\\ No newline at end of file\n"
                },
                {
                    "date": 1734589892291,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n from django.db import models\n from django.contrib.auth.models import User # For author field\n+from django.utils import timezone\n # Create your models here.\n \n \n # BlogPost Model\n@@ -15,18 +16,45 @@\n     updated_at = models.DateTimeField(auto_now=True) # Timestamp when the post is last updated\n     \n     def __str__(self):\n         return self.title\n+\n+# BlogParagraph Model\n+class BlogParagraph(models.Model):\n+    blog_post = models.ForeignKey(BlogPost, on_delete=models.CASCADE, related_name='paragraphs')\n+    content = models.TextField()\n     \n+    def __str__(self):\n+        return f\"Paragraph for {self.blog_post.title}\"\n     \n+# BlogPostImage Model (for additional images)\n+class BlogPostImage(models.Model):\n+    blog_post =models.ForeignKey(BlogPost, on_delete=models.CASCADE, related_name='images')\n+    image = models.ImageField(upload_to='blog_extra_images/')\n+    uploaded_at = models.DateTimeField(auto_now_add=True) \n\\ No newline at end of file\n+    \n+    def __str__(self):\n+        return f\"Image for {self.blog_post.title}\"\n \n+\n+# BlogQuote Model (for additional quotes)\n+class BlogQuote(models.Model):\n+    blog_post = models.ForeignKey(BlogPost, on_delete=models.CASCADE, related_name='quotes')\n+    quote = models.TextField()\n+    created_at = models.DateTimeField(auto_now_add=True)\n+    \n+    def __str__(self):\n+        return f\"Quote for {self.blog_post.title}\"  \n+    \n+    \n+\n # Comment Model for blog posts\n class Comment(models.Model):\n     blog_post = models.ForeignKey(BlogPost, related_name='comments', on_delete=models.CASCADE)\n-    name = models.CharField(max_length=100)\n-    content = models.TextField()\n-    created_at = models.DateTimeField(auto_now_add=True) # Timestamp when the post is created\n-    approved = models.BooleanField(default=False)\n+    author = models.ForeignKey(User, on_delete=models.CASCADE, blank=True, null=True) # User who posted the comment\n+    content = models.TextField()  # Comment content\n+    created_at = models.DateTimeField(default=timezone.now)    # Timestamp for when the comment is created\n     \n+    def __str__(self):\n+        return f\"Comment by {self.author} on {self.blog_post.title}\"\n     \n-    def __str__(self):\n-        return f\"Comment by {self.name} on {self.blog_post.title}\"\n+    \n\\ No newline at end of file\n"
                },
                {
                    "date": 1734596720782,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,60 +1,35 @@\n from django.db import models\n-from django.contrib.auth.models import User # For author field\n-from django.utils import timezone\n-# Create your models here.\n+from django.contrib.auth.models import User\n+from ckeditor.fields import RichTextField  # Import RichTextField for rich text editor support\n \n-\n # BlogPost Model\n class BlogPost(models.Model):\n     title = models.CharField(max_length=200)\n-    content = models.TextField() # Main content of the blog\n-    quote = models.TextField(blank=True, null=True) # Optional quote section\n-    image = models.ImageField(upload_to='blog_images/', blank=True, null=True) # Optional image\n-    video_url = models.URLField(blank=True, null=True) # Optional video URL (for embedding)\n-    author = models.ForeignKey(User, on_delete=models.CASCADE) # Author of the post\n-    created_at = models.DateTimeField(auto_now_add=True) # Timestamp when the post is created\n-    updated_at = models.DateTimeField(auto_now=True) # Timestamp when the post is last updated\n+    content = RichTextField()  # Use CKEditor for rich text input\n+    image = models.ImageField(upload_to='blog_images/', blank=True, null=True)  # Optional image\n+    video_url = models.URLField(blank=True, null=True)  # Optional video URL (for embedding)\n+    author = models.ForeignKey(User, on_delete=models.CASCADE)  # Author of the post\n+    created_at = models.DateTimeField(auto_now_add=True)  # Timestamp when the post is created\n+    updated_at = models.DateTimeField(auto_now=True)  # Timestamp when the post is last updated\n     \n     def __str__(self):\n         return self.title\n \n-# BlogParagraph Model\n-class BlogParagraph(models.Model):\n-    blog_post = models.ForeignKey(BlogPost, on_delete=models.CASCADE, related_name='paragraphs')\n-    content = models.TextField()\n-    \n-    def __str__(self):\n-        return f\"Paragraph for {self.blog_post.title}\"\n-    \n # BlogPostImage Model (for additional images)\n class BlogPostImage(models.Model):\n-    blog_post =models.ForeignKey(BlogPost, on_delete=models.CASCADE, related_name='images')\n+    blog_post = models.ForeignKey(BlogPost, on_delete=models.CASCADE, related_name='images')\n     image = models.ImageField(upload_to='blog_extra_images/')\n-    uploaded_at = models.DateTimeField(auto_now_add=True) \n+    uploaded_at = models.DateTimeField(auto_now_add=True)\n     \n     def __str__(self):\n         return f\"Image for {self.blog_post.title}\"\n \n-\n-# BlogQuote Model (for additional quotes)\n-class BlogQuote(models.Model):\n-    blog_post = models.ForeignKey(BlogPost, on_delete=models.CASCADE, related_name='quotes')\n-    quote = models.TextField()\n-    created_at = models.DateTimeField(auto_now_add=True)\n-    \n-    def __str__(self):\n-        return f\"Quote for {self.blog_post.title}\"  \n-    \n-    \n-\n # Comment Model for blog posts\n\\ No newline at end of file\n class Comment(models.Model):\n     blog_post = models.ForeignKey(BlogPost, related_name='comments', on_delete=models.CASCADE)\n-    author = models.ForeignKey(User, on_delete=models.CASCADE, blank=True, null=True) # User who posted the comment\n+    author = models.ForeignKey(User, on_delete=models.CASCADE, blank=True, null=True)  # User who posted the comment\n     content = models.TextField()  # Comment content\n-    created_at = models.DateTimeField(default=timezone.now)    # Timestamp for when the comment is created\n+    created_at = models.DateTimeField(default=timezone.now)  # Timestamp for when the comment is created\n     \n     def __str__(self):\n         return f\"Comment by {self.author} on {self.blog_post.title}\"\n-    \n-    \n"
                },
                {
                    "date": 1734596774293,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,8 @@\n from django.db import models\n-from django.contrib.auth.models import User\n+from django.contrib.auth.models import User # For author field\n+from django.utils import timezone\n+# Create your models here.\n from ckeditor.fields import RichTextField  # Import RichTextField for rich text editor support\n \n # BlogPost Model\n class BlogPost(models.Model):\n@@ -31,5 +33,5 @@\n     content = models.TextField()  # Comment content\n     created_at = models.DateTimeField(default=timezone.now)  # Timestamp for when the comment is created\n     \n     def __str__(self):\n-        return f\"Comment by {self.author} on {self.blog_post.title}\"\n\\ No newline at end of file\n+        return f\"Comment by {self.author} on {self.blog_post.title}\"\n"
                },
                {
                    "date": 1734597962440,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,10 @@\n \n # BlogPost Model\n class BlogPost(models.Model):\n     title = models.CharField(max_length=200)\n-    content = RichTextField()  # Use CKEditor for rich text input\n+    content = models.TextField()  # Main content of the blog\n+    quote = models.TextField(blank=True, null=True)  # Optional quote section\n     image = models.ImageField(upload_to='blog_images/', blank=True, null=True)  # Optional image\n     video_url = models.URLField(blank=True, null=True)  # Optional video URL (for embedding)\n     author = models.ForeignKey(User, on_delete=models.CASCADE)  # Author of the post\n     created_at = models.DateTimeField(auto_now_add=True)  # Timestamp when the post is created\n"
                },
                {
                    "date": 1734598210089,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,10 +6,9 @@\n \n # BlogPost Model\n class BlogPost(models.Model):\n     title = models.CharField(max_length=200)\n-    content = models.TextField()  # Main content of the blog\n-    quote = models.TextField(blank=True, null=True)  # Optional quote section\n+    content = RichTextField()  # Use CKEditor for rich text input\n     image = models.ImageField(upload_to='blog_images/', blank=True, null=True)  # Optional image\n     video_url = models.URLField(blank=True, null=True)  # Optional video URL (for embedding)\n     author = models.ForeignKey(User, on_delete=models.CASCADE)  # Author of the post\n     created_at = models.DateTimeField(auto_now_add=True)  # Timestamp when the post is created\n"
                },
                {
                    "date": 1734599043324,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,7 @@\n from django.db import models\n-from django.contrib.auth.models import User # For author field\n+from django.contrib.auth.models import User  # For author field\n from django.utils import timezone\n-# Create your models here.\n from ckeditor.fields import RichTextField  # Import RichTextField for rich text editor support\n \n # BlogPost Model\n class BlogPost(models.Model):\n"
                },
                {
                    "date": 1734599056270,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n from django.db import models\n from django.contrib.auth.models import User  # For author field\n from django.utils import timezone\n-from ckeditor.fields import RichTextField  # Import RichTextField for rich text editor support\n+from ckeditor.fields import RichTextField  # type: ignore # Import RichTextField for rich text editor support\n \n # BlogPost Model\n class BlogPost(models.Model):\n     title = models.CharField(max_length=200)\n"
                },
                {
                    "date": 1734599172197,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n from django.db import models\n from django.contrib.auth.models import User  # For author field\n from django.utils import timezone\n-from ckeditor.fields import RichTextField  # type: ignore # Import RichTextField for rich text editor support\n+from ckeditor_5.fields import RichTextField\n \n # BlogPost Model\n class BlogPost(models.Model):\n     title = models.CharField(max_length=200)\n"
                },
                {
                    "date": 1734600797872,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n from django.db import models\n from django.contrib.auth.models import User  # For author field\n from django.utils import timezone\n-from ckeditor_5.fields import RichTextField\n+from ckeditor_5.fields import RichTextField # type: ignore\n \n # BlogPost Model\n class BlogPost(models.Model):\n     title = models.CharField(max_length=200)\n"
                },
                {
                    "date": 1734600821319,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n from django.db import models\n from django.contrib.auth.models import User  # For author field\n from django.utils import timezone\n-from ckeditor_5.fields import RichTextField # type: ignore\n+from ckeditor_5.fields import RichTextField\n \n # BlogPost Model\n class BlogPost(models.Model):\n     title = models.CharField(max_length=200)\n"
                },
                {
                    "date": 1734632136483,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,52 @@\n+from django.db import models\n+from django.contrib.auth.models import User\n+from ckeditor.fields import RichTextField\n+from django.utils.text import slugify\n+\n+\n+# BlogPost Model\n+class BlogPost(models.Model):\n+    title = models.CharField(max_length=200, unique=True)\n+    slug = models.SlugField(max_length=200, unique=True, blank=True)\n+    content = RichTextField()  # CKEditor for rich text content\n+    image = models.ImageField(upload_to='blog_images/', null=True, blank=True)\n+    video_url = models.URLField(null=True, blank=True)\n+    author = models.ForeignKey(User, on_delete=models.CASCADE, related_name='blog_posts')\n+    created_at = models.DateTimeField(auto_now_add=True)\n+    updated_at = models.DateTimeField(auto_now=True)\n+\n+    class Meta:\n+        ordering = ['-created_at']\n+\n+    def save(self, *args, **kwargs):\n+        if not self.slug:\n+            self.slug = slugify(self.title)\n+        super().save(*args, **kwargs)\n+\n+    def __str__(self):\n+        return self.title\n+\n+\n+# BlogPostImage Model (for additional images)\n+class BlogPostImage(models.Model):\n+    blog_post = models.ForeignKey(BlogPost, on_delete=models.CASCADE, related_name='images')\n+    image = models.ImageField(upload_to='blog_extra_images/')\n+    uploaded_at = models.DateTimeField(auto_now_add=True)\n+    \n+    def __str__(self):\n+        return f\"Image for {self.blog_post.title}\"\n+\n+\n+# Comment Model\n+class Comment(models.Model):\n+    blog_post = models.ForeignKey(BlogPost, on_delete=models.CASCADE, related_name='comments')\n+    author = models.ForeignKey(User, on_delete=models.CASCADE, related_name='comments')\n+    content = models.TextField()\n+    created_at = models.DateTimeField(auto_now_add=True)\n+    updated_at = models.DateTimeField(auto_now=True)\n+\n+    class Meta:\n+        ordering = ['-created_at']\n+\n+    def __str__(self):\n+        return f\"Comment by {self.author.username} on {self.blog_post.title}\"\n"
                },
                {
                    "date": 1734640799675,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,9 @@\n from django.db import models\n from django.contrib.auth.models import User\n from ckeditor.fields import RichTextField\n+from ckeditor_uploader.fields import RichTextUploadingField\n+\n from django.utils.text import slugify\n \n \n # BlogPost Model\n@@ -49,40 +51,4 @@\n         ordering = ['-created_at']\n \n     def __str__(self):\n         return f\"Comment by {self.author.username} on {self.blog_post.title}\"\n-from django.db import models\n-from django.contrib.auth.models import User  # For author field\n-from django.utils import timezone\n-from ckeditor_5.fields import RichTextField\n-\n-# BlogPost Model\n-class BlogPost(models.Model):\n-    title = models.CharField(max_length=200)\n-    content = RichTextField()  # Use CKEditor for rich text input\n-    image = models.ImageField(upload_to='blog_images/', blank=True, null=True)  # Optional image\n-    video_url = models.URLField(blank=True, null=True)  # Optional video URL (for embedding)\n-    author = models.ForeignKey(User, on_delete=models.CASCADE)  # Author of the post\n-    created_at = models.DateTimeField(auto_now_add=True)  # Timestamp when the post is created\n-    updated_at = models.DateTimeField(auto_now=True)  # Timestamp when the post is last updated\n-    \n-    def __str__(self):\n-        return self.title\n-\n-# BlogPostImage Model (for additional images)\n-class BlogPostImage(models.Model):\n-    blog_post = models.ForeignKey(BlogPost, on_delete=models.CASCADE, related_name='images')\n-    image = models.ImageField(upload_to='blog_extra_images/')\n-    uploaded_at = models.DateTimeField(auto_now_add=True)\n-    \n-    def __str__(self):\n-        return f\"Image for {self.blog_post.title}\"\n-\n-# Comment Model for blog posts\n-class Comment(models.Model):\n-    blog_post = models.ForeignKey(BlogPost, related_name='comments', on_delete=models.CASCADE)\n-    author = models.ForeignKey(User, on_delete=models.CASCADE, blank=True, null=True)  # User who posted the comment\n-    content = models.TextField()  # Comment content\n-    created_at = models.DateTimeField(default=timezone.now)  # Timestamp for when the comment is created\n-    \n-    def __str__(self):\n-        return f\"Comment by {self.author} on {self.blog_post.title}\"\n"
                },
                {
                    "date": 1734640806463,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,7 @@\n from django.db import models\n from django.contrib.auth.models import User\n from ckeditor.fields import RichTextField\n-from ckeditor_uploader.fields import RichTextUploadingField\n-\n from django.utils.text import slugify\n \n \n # BlogPost Model\n"
                },
                {
                    "date": 1734816186945,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,4 +49,13 @@\n         ordering = ['-created_at']\n \n     def __str__(self):\n         return f\"Comment by {self.author.username} on {self.blog_post.title}\"\n+\n+\n+\n+class Profile(models.Model):\n+    user = models.OneToOneField(User, on_delete=models.CASCADE)\n+    avatar = models.ImageField(upload_to='avatars/', null=True, blank=True)\n+\n+    def __str__(self):\n+        return self.user.username\n\\ No newline at end of file\n"
                },
                {
                    "date": 1734880932374,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,11 +51,20 @@\n     def __str__(self):\n         return f\"Comment by {self.author.username} on {self.blog_post.title}\"\n \n \n-\n+# Profile Model\n class Profile(models.Model):\n-    user = models.OneToOneField(User, on_delete=models.CASCADE)\n+    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name='profile')\n     avatar = models.ImageField(upload_to='avatars/', null=True, blank=True)\n \n\\ No newline at end of file\n     def __str__(self):\n-        return self.user.username\n+        return self.user.username\n+\n+\n+# Add dynamic profile property to User model\n+def get_profile(self):\n+    # Ensure the profile is created if it doesn't exist\n+    profile, created = Profile.objects.get_or_create(user=self)\n+    return profile\n+\n+User.add_to_class(\"profile\", property(get_profile))\n"
                },
                {
                    "date": 1734907036752,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n from django.db import models\n from django.contrib.auth.models import User\n from ckeditor.fields import RichTextField\n from django.utils.text import slugify\n+from django.contrib.auth.models import AbstractUser\n \n \n # BlogPost Model\n class BlogPost(models.Model):\n@@ -66,5 +67,12 @@\n     # Ensure the profile is created if it doesn't exist\n     profile, created = Profile.objects.get_or_create(user=self)\n     return profile\n \n-User.add_to_class(\"profile\", property(get_profile))\n\\ No newline at end of file\n+User.add_to_class(\"profile\", property(get_profile))\n+\n+\n+\n+\n+class CustomUser(AbstractUser):\n+    phone_number = models.CharField(max_length=15)\n+    profile_picture = models.ImageField(upload_to='profile_pictures/', blank=True, null=True)\n"
                },
                {
                    "date": 1734907759431,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,8 +71,11 @@\n User.add_to_class(\"profile\", property(get_profile))\n \n \n \n-\n class CustomUser(AbstractUser):\n     phone_number = models.CharField(max_length=15)\n     profile_picture = models.ImageField(upload_to='profile_pictures/', blank=True, null=True)\n+    gender = models.CharField(max_length=10, choices=[('Male', 'Male'), ('Female', 'Female'), ('Other', 'Other')], default='Other')\n+\n+    def __str__(self):\n+        return self.username\n\\ No newline at end of file\n"
                },
                {
                    "date": 1734984007797,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,19 +1,29 @@\n from django.db import models\n-from django.contrib.auth.models import User\n from ckeditor.fields import RichTextField\n from django.utils.text import slugify\n+from django.conf import settings  # For AUTH_USER_MODEL\n from django.contrib.auth.models import AbstractUser\n \n \n+# CustomUser Model\n+class CustomUser(AbstractUser):\n+    phone_number = models.CharField(max_length=15)\n+    profile_picture = models.ImageField(upload_to='profile_pictures/', blank=True, null=True)\n+    gender = models.CharField(max_length=10, choices=[('Male', 'Male'), ('Female', 'Female'), ('Other', 'Other')], default='Other')\n+\n+    def __str__(self):\n+        return self.username\n+\n+\n # BlogPost Model\n class BlogPost(models.Model):\n     title = models.CharField(max_length=200, unique=True)\n     slug = models.SlugField(max_length=200, unique=True, blank=True)\n     content = RichTextField()  # CKEditor for rich text content\n     image = models.ImageField(upload_to='blog_images/', null=True, blank=True)\n     video_url = models.URLField(null=True, blank=True)\n-    author = models.ForeignKey(User, on_delete=models.CASCADE, related_name='blog_posts')\n+    author = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='blog_posts')\n     created_at = models.DateTimeField(auto_now_add=True)\n     updated_at = models.DateTimeField(auto_now=True)\n \n     class Meta:\n@@ -40,9 +50,9 @@\n \n # Comment Model\n class Comment(models.Model):\n     blog_post = models.ForeignKey(BlogPost, on_delete=models.CASCADE, related_name='comments')\n-    author = models.ForeignKey(User, on_delete=models.CASCADE, related_name='comments')\n+    author = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='comments')\n     content = models.TextField()\n     created_at = models.DateTimeField(auto_now_add=True)\n     updated_at = models.DateTimeField(auto_now=True)\n \n@@ -54,28 +64,9 @@\n \n \n # Profile Model\n class Profile(models.Model):\n-    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name='profile')\n+    user = models.OneToOneField(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='profile')\n     avatar = models.ImageField(upload_to='avatars/', null=True, blank=True)\n \n     def __str__(self):\n         return self.user.username\n-\n-\n-# Add dynamic profile property to User model\n-def get_profile(self):\n-    # Ensure the profile is created if it doesn't exist\n-    profile, created = Profile.objects.get_or_create(user=self)\n-    return profile\n-\n-User.add_to_class(\"profile\", property(get_profile))\n-\n-\n-\n-class CustomUser(AbstractUser):\n-    phone_number = models.CharField(max_length=15)\n-    profile_picture = models.ImageField(upload_to='profile_pictures/', blank=True, null=True)\n-    gender = models.CharField(max_length=10, choices=[('Male', 'Male'), ('Female', 'Female'), ('Other', 'Other')], default='Other')\n-\n-    def __str__(self):\n\\ No newline at end of file\n-        return self.username\n"
                },
                {
                    "date": 1734985499162,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,17 +5,28 @@\n from django.contrib.auth.models import AbstractUser\n \n \n # CustomUser Model\n+\n class CustomUser(AbstractUser):\n-    phone_number = models.CharField(max_length=15)\n+    phone_number = models.CharField(max_length=15, blank=True, null=True)\n     profile_picture = models.ImageField(upload_to='profile_pictures/', blank=True, null=True)\n-    gender = models.CharField(max_length=10, choices=[('Male', 'Male'), ('Female', 'Female'), ('Other', 'Other')], default='Other')\n+    gender = models.CharField(\n+        max_length=10,\n+        choices=[\n+            ('Male', 'Male'),\n+            ('Female', 'Female'),\n+            ('Other', 'Other'),\n+        ],\n+        blank=True,\n+        null=True\n+    )\n \n     def __str__(self):\n         return self.username\n \n \n+\n # BlogPost Model\n class BlogPost(models.Model):\n     title = models.CharField(max_length=200, unique=True)\n     slug = models.SlugField(max_length=200, unique=True, blank=True)\n"
                },
                {
                    "date": 1734986094666,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,26 +7,18 @@\n \n # CustomUser Model\n \n class CustomUser(AbstractUser):\n-    phone_number = models.CharField(max_length=15, blank=True, null=True)\n+    first_name = models.CharField(max_length=30)\n+    last_name = models.CharField(max_length=30)\n+    gender = models.CharField(max_length=10)\n+    phone_number = models.CharField(max_length=15)\n     profile_picture = models.ImageField(upload_to='profile_pictures/', blank=True, null=True)\n-    gender = models.CharField(\n-        max_length=10,\n-        choices=[\n-            ('Male', 'Male'),\n-            ('Female', 'Female'),\n-            ('Other', 'Other'),\n-        ],\n-        blank=True,\n-        null=True\n-    )\n \n     def __str__(self):\n         return self.username\n \n \n-\n # BlogPost Model\n class BlogPost(models.Model):\n     title = models.CharField(max_length=200, unique=True)\n     slug = models.SlugField(max_length=200, unique=True, blank=True)\n"
                },
                {
                    "date": 1734986268246,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,9 +67,9 @@\n \n \n # Profile Model\n class Profile(models.Model):\n-    user = models.OneToOneField(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='profile')\n+    author = models.OneToOneField(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='profile')\n     avatar = models.ImageField(upload_to='avatars/', null=True, blank=True)\n \n     def __str__(self):\n         return self.user.username\n"
                },
                {
                    "date": 1734986379298,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,9 +67,9 @@\n \n \n # Profile Model\n class Profile(models.Model):\n-    author = models.OneToOneField(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='profile')\n+    user = models.OneToOneField(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='profile')\n     avatar = models.ImageField(upload_to='avatars/', null=True, blank=True)\n \n     def __str__(self):\n         return self.user.username\n"
                },
                {
                    "date": 1734986435455,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n from ckeditor.fields import RichTextField\n from django.utils.text import slugify\n from django.conf import settings  # For AUTH_USER_MODEL\n from django.contrib.auth.models import AbstractUser\n+from .models import CustomUser\n \n \n # CustomUser Model\n \n"
                },
                {
                    "date": 1734986642296,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,15 +1,11 @@\n from django.db import models\n from ckeditor.fields import RichTextField\n from django.utils.text import slugify\n from django.conf import settings  # For AUTH_USER_MODEL\n-from django.contrib.auth.models import AbstractUser\n-from .models import CustomUser\n \n-\n-# CustomUser Model\n-\n-class CustomUser(AbstractUser):\n+# CustomUser Model (no need to import CustomUser directly)\n+class CustomUser(models.Model):\n     first_name = models.CharField(max_length=30)\n     last_name = models.CharField(max_length=30)\n     gender = models.CharField(max_length=10)\n     phone_number = models.CharField(max_length=15)\n"
                },
                {
                    "date": 1734986734523,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,12 @@\n from django.utils.text import slugify\n from django.conf import settings  # For AUTH_USER_MODEL\n \n # CustomUser Model (no need to import CustomUser directly)\n-class CustomUser(models.Model):\n+from django.db import models\n+from django.contrib.auth.models import AbstractUser\n+\n+class CustomUser(AbstractUser):  # Inherit from AbstractUser\n     first_name = models.CharField(max_length=30)\n     last_name = models.CharField(max_length=30)\n     gender = models.CharField(max_length=10)\n     phone_number = models.CharField(max_length=15)\n@@ -13,9 +16,8 @@\n \n     def __str__(self):\n         return self.username\n \n-\n # BlogPost Model\n class BlogPost(models.Model):\n     title = models.CharField(max_length=200, unique=True)\n     slug = models.SlugField(max_length=200, unique=True, blank=True)\n"
                },
                {
                    "date": 1734987706998,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,10 +13,9 @@\n     gender = models.CharField(max_length=10)\n     phone_number = models.CharField(max_length=15)\n     profile_picture = models.ImageField(upload_to='profile_pictures/', blank=True, null=True)\n \n-    def __str__(self):\n-        return self.username\n+    pass\n \n # BlogPost Model\n class BlogPost(models.Model):\n     title = models.CharField(max_length=200, unique=True)\n"
                },
                {
                    "date": 1734987718433,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,10 @@\n     gender = models.CharField(max_length=10)\n     phone_number = models.CharField(max_length=15)\n     profile_picture = models.ImageField(upload_to='profile_pictures/', blank=True, null=True)\n \n-    pass\n+    def __str__(self):\n+        return self.username\n \n # BlogPost Model\n class BlogPost(models.Model):\n     title = models.CharField(max_length=200, unique=True)\n"
                },
                {
                    "date": 1734988789811,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,10 +9,10 @@\n \n class CustomUser(AbstractUser):  # Inherit from AbstractUser\n     first_name = models.CharField(max_length=30)\n     last_name = models.CharField(max_length=30)\n-    gender = models.CharField(max_length=10)\n-    phone_number = models.CharField(max_length=15)\n+    gender = models.CharField(max_length=10, choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other')], blank=True, null=True)\n+    phone_number = models.CharField(max_length=15, blank=True, null=True)\n     profile_picture = models.ImageField(upload_to='profile_pictures/', blank=True, null=True)\n \n     def __str__(self):\n         return self.username\n"
                },
                {
                    "date": 1735227477688,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,17 +1,20 @@\n from django.db import models\n from ckeditor.fields import RichTextField\n from django.utils.text import slugify\n from django.conf import settings  # For AUTH_USER_MODEL\n-\n-# CustomUser Model (no need to import CustomUser directly)\n-from django.db import models\n from django.contrib.auth.models import AbstractUser\n \n-class CustomUser(AbstractUser):  # Inherit from AbstractUser\n+# CustomUser Model\n+class CustomUser(AbstractUser):\n     first_name = models.CharField(max_length=30)\n     last_name = models.CharField(max_length=30)\n-    gender = models.CharField(max_length=10, choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other')], blank=True, null=True)\n+    gender = models.CharField(\n+        max_length=20,\n+        choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other'), ('P', 'Prefer not to say')],\n+        blank=True,\n+        null=True\n+    )\n     phone_number = models.CharField(max_length=15, blank=True, null=True)\n     profile_picture = models.ImageField(upload_to='profile_pictures/', blank=True, null=True)\n \n     def __str__(self):\n@@ -38,37 +41,45 @@\n \n     def __str__(self):\n         return self.title\n \n-\n # BlogPostImage Model (for additional images)\n class BlogPostImage(models.Model):\n     blog_post = models.ForeignKey(BlogPost, on_delete=models.CASCADE, related_name='images')\n     image = models.ImageField(upload_to='blog_extra_images/')\n     uploaded_at = models.DateTimeField(auto_now_add=True)\n-    \n+\n     def __str__(self):\n         return f\"Image for {self.blog_post.title}\"\n \n-\n # Comment Model\n class Comment(models.Model):\n-    blog_post = models.ForeignKey(BlogPost, on_delete=models.CASCADE, related_name='comments')\n-    author = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='comments')\n-    content = models.TextField()\n-    created_at = models.DateTimeField(auto_now_add=True)\n-    updated_at = models.DateTimeField(auto_now=True)\n+    blog_post = models.ForeignKey(\n+        BlogPost, \n+        on_delete=models.CASCADE, \n+        related_name='comments'\n+    )  # Links the comment to a blog post\n+    author = models.ForeignKey(\n+        settings.AUTH_USER_MODEL, \n+        on_delete=models.CASCADE, \n+        related_name='comments'\n+    )  # The user who created the comment\n+    content = models.TextField()  # The content of the comment\n+    created_at = models.DateTimeField(auto_now_add=True)  # Timestamp for when the comment was created\n+    updated_at = models.DateTimeField(auto_now=True)  # Timestamp for the last update\n+    parent = models.ForeignKey(\n+        'self', \n+        on_delete=models.CASCADE, \n+        null=True, \n+        blank=True, \n+        related_name='replies'\n+    )  # Allows for replies to comments (self-referential)\n \n     class Meta:\n-        ordering = ['-created_at']\n+        ordering = ['-created_at']  # Orders comments by creation time in descending order\n \n     def __str__(self):\n+        # Shows the author, content snippet, and parent status\n+        if self.parent:\n+            return f\"Reply by {self.author.username} on {self.parent.author.username}'s comment\"\n         return f\"Comment by {self.author.username} on {self.blog_post.title}\"\n \n-\n-# Profile Model\n-class Profile(models.Model):\n-    user = models.OneToOneField(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='profile')\n-    avatar = models.ImageField(upload_to='avatars/', null=True, blank=True)\n-\n-    def __str__(self):\n-        return self.user.username\n"
                },
                {
                    "date": 1735238475604,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,34 +52,17 @@\n         return f\"Image for {self.blog_post.title}\"\n \n # Comment Model\n class Comment(models.Model):\n-    blog_post = models.ForeignKey(\n-        BlogPost, \n-        on_delete=models.CASCADE, \n-        related_name='comments'\n-    )  # Links the comment to a blog post\n-    author = models.ForeignKey(\n-        settings.AUTH_USER_MODEL, \n-        on_delete=models.CASCADE, \n-        related_name='comments'\n-    )  # The user who created the comment\n-    content = models.TextField()  # The content of the comment\n-    created_at = models.DateTimeField(auto_now_add=True)  # Timestamp for when the comment was created\n-    updated_at = models.DateTimeField(auto_now=True)  # Timestamp for the last update\n-    parent = models.ForeignKey(\n-        'self', \n-        on_delete=models.CASCADE, \n-        null=True, \n-        blank=True, \n-        related_name='replies'\n-    )  # Allows for replies to comments (self-referential)\n+    blog_post = models.ForeignKey(BlogPost, on_delete=models.CASCADE, related_name='comments')\n+    author = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='comments')\n+    content = models.TextField()\n+    created_at = models.DateTimeField(auto_now_add=True)\n+    updated_at = models.DateTimeField(auto_now=True)\n+    parent = models.ForeignKey('self', on_delete=models.CASCADE, null=True, blank=True, related_name='replies')\n \n     class Meta:\n-        ordering = ['-created_at']  # Orders comments by creation time in descending order\n+        ordering = ['-created_at']\n \n     def __str__(self):\n-        # Shows the author, content snippet, and parent status\n-        if self.parent:\n-            return f\"Reply by {self.author.username} on {self.parent.author.username}'s comment\"\n         return f\"Comment by {self.author.username} on {self.blog_post.title}\"\n \n"
                },
                {
                    "date": 1735324002466,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,11 +58,13 @@\n     content = models.TextField()\n     created_at = models.DateTimeField(auto_now_add=True)\n     updated_at = models.DateTimeField(auto_now=True)\n     parent = models.ForeignKey('self', on_delete=models.CASCADE, null=True, blank=True, related_name='replies')\n+    \n+    thumbs_up_count = models.IntegerField(default=0)\n+    thumbs_down_count = models.IntegerField(default=0)\n \n     class Meta:\n         ordering = ['-created_at']\n \n     def __str__(self):\n         return f\"Comment by {self.author.username} on {self.blog_post.title}\"\n-\n"
                },
                {
                    "date": 1735326015556,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,8 +51,9 @@\n     def __str__(self):\n         return f\"Image for {self.blog_post.title}\"\n \n # Comment Model\n+# Comment Model\n class Comment(models.Model):\n     blog_post = models.ForeignKey(BlogPost, on_delete=models.CASCADE, related_name='comments')\n     author = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='comments')\n     content = models.TextField()\n@@ -61,10 +62,20 @@\n     parent = models.ForeignKey('self', on_delete=models.CASCADE, null=True, blank=True, related_name='replies')\n     \n     thumbs_up_count = models.IntegerField(default=0)\n     thumbs_down_count = models.IntegerField(default=0)\n+    \n+    # Tracking which users have liked or disliked this comment\n+    liked_by = models.ManyToManyField(settings.AUTH_USER_MODEL, related_name='liked_comments', blank=True)\n+    disliked_by = models.ManyToManyField(settings.AUTH_USER_MODEL, related_name='disliked_comments', blank=True)\n \n     class Meta:\n         ordering = ['-created_at']\n \n     def __str__(self):\n         return f\"Comment by {self.author.username} on {self.blog_post.title}\"\n+\n+    def user_has_liked(self, user):\n+        return self.liked_by.filter(id=user.id).exists()\n+\n+    def user_has_disliked(self, user):\n+        return self.disliked_by.filter(id=user.id).exists()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1735333040884,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,31 +51,39 @@\n     def __str__(self):\n         return f\"Image for {self.blog_post.title}\"\n \n # Comment Model\n-# Comment Model\n+\n+\n+\n class Comment(models.Model):\n-    blog_post = models.ForeignKey(BlogPost, on_delete=models.CASCADE, related_name='comments')\n+    blog_post = models.ForeignKey('BlogPost', on_delete=models.CASCADE, related_name='comments')\n     author = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='comments')\n     content = models.TextField()\n     created_at = models.DateTimeField(auto_now_add=True)\n     updated_at = models.DateTimeField(auto_now=True)\n     parent = models.ForeignKey('self', on_delete=models.CASCADE, null=True, blank=True, related_name='replies')\n-    \n+\n     thumbs_up_count = models.IntegerField(default=0)\n     thumbs_down_count = models.IntegerField(default=0)\n-    \n-    # Tracking which users have liked or disliked this comment\n-    liked_by = models.ManyToManyField(settings.AUTH_USER_MODEL, related_name='liked_comments', blank=True)\n-    disliked_by = models.ManyToManyField(settings.AUTH_USER_MODEL, related_name='disliked_comments', blank=True)\n \n     class Meta:\n         ordering = ['-created_at']\n \n     def __str__(self):\n         return f\"Comment by {self.author.username} on {self.blog_post.title}\"\n \n\\ No newline at end of file\n+    # You can add methods here to check if a user liked or disliked the comment\n     def user_has_liked(self, user):\n         return self.liked_by.filter(id=user.id).exists()\n \n     def user_has_disliked(self, user):\n-        return self.disliked_by.filter(id=user.id).exists()\n+        return self.disliked_by.filter(id=user.id).exists()\n+\n+# Separate model for storing user votes\n+class UserCommentVote(models.Model):\n+    user = models.ForeignKey(User, on_delete=models.CASCADE)\n+    comment = models.ForeignKey(Comment, on_delete=models.CASCADE)\n+    vote = models.CharField(max_length=10, choices=[('up', 'Up'), ('down', 'Down')])\n+\n+    class Meta:\n+        unique_together = ('user', 'comment')  # Ensure each user can vote only once per comment\n\\ No newline at end of file\n"
                },
                {
                    "date": 1735333065747,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n from django.db import models\n from ckeditor.fields import RichTextField\n from django.utils.text import slugify\n from django.conf import settings  # For AUTH_USER_MODEL\n-from django.contrib.auth.models import AbstractUser\n+from django.contrib.auth.models import AbstractUser, User\n \n # CustomUser Model\n class CustomUser(AbstractUser):\n     first_name = models.CharField(max_length=30)\n"
                },
                {
                    "date": 1735333559070,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,9 +80,9 @@\n         return self.disliked_by.filter(id=user.id).exists()\n \n # Separate model for storing user votes\n class UserCommentVote(models.Model):\n-    user = models.ForeignKey(User, on_delete=models.CASCADE)\n+    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)\n     comment = models.ForeignKey(Comment, on_delete=models.CASCADE)\n     vote = models.CharField(max_length=10, choices=[('up', 'Up'), ('down', 'Down')])\n \n     class Meta:\n"
                },
                {
                    "date": 1735333577659,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,9 +80,9 @@\n         return self.disliked_by.filter(id=user.id).exists()\n \n # Separate model for storing user votes\n class UserCommentVote(models.Model):\n-    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)\n+    user = models.ForeignKey(User, on_delete=models.CASCADE)\n     comment = models.ForeignKey(Comment, on_delete=models.CASCADE)\n     vote = models.CharField(max_length=10, choices=[('up', 'Up'), ('down', 'Down')])\n \n     class Meta:\n"
                },
                {
                    "date": 1735333610768,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,9 +80,9 @@\n         return self.disliked_by.filter(id=user.id).exists()\n \n # Separate model for storing user votes\n class UserCommentVote(models.Model):\n-    user = models.ForeignKey(User, on_delete=models.CASCADE)\n+    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)\n     comment = models.ForeignKey(Comment, on_delete=models.CASCADE)\n     vote = models.CharField(max_length=10, choices=[('up', 'Up'), ('down', 'Down')])\n \n     class Meta:\n"
                }
            ],
            "date": 1733567775173,
            "name": "Commit-0",
            "content": "from django.db import models\n\n# Create your models here.\n\n\nclass BlogPost(models.Model):\n    title = models.CharField(max_length=200)\n    content = models.TextField()\n    created_at = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return self.title\n"
        }
    ]
}