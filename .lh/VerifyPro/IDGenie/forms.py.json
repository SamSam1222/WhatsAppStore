{
    "sourceFile": "VerifyPro/IDGenie/forms.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 17,
            "patches": [
                {
                    "date": 1734464869546,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1734467429071,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,39 +2,45 @@\n from .models import BlogPost\n \n \n class BlogPostForm(forms.ModelForm):\n-    # Custom additional fields\n+    # Additional fields for dynamics content\n     content_extra = forms.CharField(\n-        widget=forms.Textarea(attrs={'rows': 3, 'placeholder': 'Add another paragraph...'}),\n+        widget=forms.Textarea(attrs={'rows': 3, 'cols': 40}),\n         required=False,\n         label=\"Additional Paragraph\"\n     )\n     image_extra = forms.ImageField(required=False, label=\"Additional Image\")\n-    video_url_extra = forms.URLField(\n-        widget=forms.URLInput(attrs={'placeholder': 'Paste video URL here...'}),\n-        required=False,\n-        label=\"Additional Video URL\"\n-    )\n+    video_url_extra = forms.URLField(required=False, label=\"Additional Video URL\")\n     quote_extra = forms.CharField(\n-        widget=forms.Textarea(attrs={'rows': 2, 'placeholder': 'Add a quote...'}),\n+        widget=forms.Textarea(attrs={\"rows\": 2, \"cols\": 40}),\n         required=False,\n-        label=\"Quote\"\n+        label=\"Optional Quote\"\n     )\n     \n+ \n     class Meta:\n         model = BlogPost\n         fields = ['title', 'content', 'quote', 'image', 'video_url', 'author']\n-    \n+        \n+        \n+    # Custom save method to handle extra fields\n     def save(self, commit=True):\n         blog_post = super().save(commit=False)\n-        # Append additional paragraph to the main content if provided\n+        \n+        # Append extra content to the existing content\n         content_extra = self.cleaned_data.get('content_extra')\n         if content_extra:\n-            blog_post.content += f\"\\n\\n{'content_extra'}\"\n+            blog_post.content += f\"\\n\\n{content_extra}\"\n         \n-        # Handle extra media (image and video) logic here if needed\n-        # For now, we are only saving the main image and video fields\n         \n+        # Add extra quote to the content\n+        quote_extra = self.cleaned_data.get('quote_extra')\n+        if quote_extra:\n+            blog_post.content += f\"\\n\\n---\\nQuote: {quote_extra}\\n---\"\n+            \n+        # Save image and video URLs as needed (optional handling)\n+        # This part can be expanded to save into related models\n+        \n         if commit:\n             blog_post.save()\n         return blog_post\n\\ No newline at end of file\n"
                },
                {
                    "date": 1734471468680,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n from django import forms \n from .models import BlogPost\n \n \n-class BlogPostForm(forms.ModelForm):\n+class BlogPostAdminForm(forms.ModelForm):\n     # Additional fields for dynamics content\n     content_extra = forms.CharField(\n         widget=forms.Textarea(attrs={'rows': 3, 'cols': 40}),\n         required=False,\n"
                },
                {
                    "date": 1734597562961,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,46 +1,27 @@\n-from django import forms \n-from .models import BlogPost\n+from django import forms\n+from .models import BlogPost, Comment\n \n-\n class BlogPostAdminForm(forms.ModelForm):\n-    # Additional fields for dynamics content\n-    content_extra = forms.CharField(\n-        widget=forms.Textarea(attrs={'rows': 3, 'cols': 40}),\n-        required=False,\n-        label=\"Additional Paragraph\"\n-    )\n-    image_extra = forms.ImageField(required=False, label=\"Additional Image\")\n-    video_url_extra = forms.URLField(required=False, label=\"Additional Video URL\")\n-    quote_extra = forms.CharField(\n-        widget=forms.Textarea(attrs={\"rows\": 2, \"cols\": 40}),\n-        required=False,\n-        label=\"Optional Quote\"\n-    )\n-    \n- \n     class Meta:\n         model = BlogPost\n         fields = ['title', 'content', 'quote', 'image', 'video_url', 'author']\n-        \n-        \n-    # Custom save method to handle extra fields\n+\n+    # Custom save method to handle extra fields (like saving images or video URLs)\n     def save(self, commit=True):\n         blog_post = super().save(commit=False)\n-        \n-        # Append extra content to the existing content\n-        content_extra = self.cleaned_data.get('content_extra')\n-        if content_extra:\n-            blog_post.content += f\"\\n\\n{content_extra}\"\n-        \n-        \n-        # Add extra quote to the content\n-        quote_extra = self.cleaned_data.get('quote_extra')\n-        if quote_extra:\n-            blog_post.content += f\"\\n\\n---\\nQuote: {quote_extra}\\n---\"\n-            \n-        # Save image and video URLs as needed (optional handling)\n-        # This part can be expanded to save into related models\n\\ No newline at end of file\n-        \n+\n+        # If any additional processing for rich content or media is needed, handle it here\n+\n         if commit:\n             blog_post.save()\n-        return blog_post\n+\n+        return blog_post\n+\n+\n+class CommentForm(forms.ModelForm):\n+    class Meta:\n+        model = Comment\n+        fields = ['content']\n+        widgets = {\n+            'content': forms.Textarea(attrs={'rows': 3, 'placeholder': 'Write your comment here...'}),\n+        }\n"
                },
                {
                    "date": 1734597681946,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,9 @@\n from django import forms\n-from .models import BlogPost, Comment\n+from .models import BlogPost, BlogParagraph, BlogPostImage, BlogQuote, Comment\n \n+\n+\n class BlogPostAdminForm(forms.ModelForm):\n     class Meta:\n         model = BlogPost\n         fields = ['title', 'content', 'quote', 'image', 'video_url', 'author']\n"
                },
                {
                    "date": 1734597704755,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n from django import forms\n-from .models import BlogPost, BlogParagraph, BlogPostImage, BlogQuote, Comment\n+from .models import BlogPost, BlogPostImage, Comment\n \n \n \n class BlogPostAdminForm(forms.ModelForm):\n"
                },
                {
                    "date": 1734597849847,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n from django import forms\n-from .models import BlogPost, BlogPostImage, Comment\n+from .models import BlogPost, Comment\n \n \n \n class BlogPostAdminForm(forms.ModelForm):\n"
                },
                {
                    "date": 1734598322607,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,26 +1,29 @@\n from django import forms\n from .models import BlogPost, Comment\n+from ckeditor.widgets import CKEditorWidget  # Import CKEditorWidget\n \n-\n-\n+# Form for handling BlogPost in the Admin interface\n class BlogPostAdminForm(forms.ModelForm):\n     class Meta:\n         model = BlogPost\n-        fields = ['title', 'content', 'quote', 'image', 'video_url', 'author']\n+        fields = ['title', 'content', 'image', 'video_url', 'author']  # 'quote' removed since CKEditor handles rich content\n+        widgets = {\n+            'content': CKEditorWidget(),  # Using CKEditor for the content field\n+        }\n \n-    # Custom save method to handle extra fields (like saving images or video URLs)\n+    # Custom save method to handle extra fields (if needed)\n     def save(self, commit=True):\n         blog_post = super().save(commit=False)\n \n-        # If any additional processing for rich content or media is needed, handle it here\n-\n+        # Any additional processing for media (like saving images or video URLs) can go here\n         if commit:\n             blog_post.save()\n \n         return blog_post\n \n \n+# Form for handling Comments\n class CommentForm(forms.ModelForm):\n     class Meta:\n         model = Comment\n         fields = ['content']\n"
                },
                {
                    "date": 1734598603043,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n from django import forms\n from .models import BlogPost, Comment\n-from ckeditor.widgets import CKEditorWidget  # Import CKEditorWidget\n+from ckeditor_5.widgets import CKEditorWidget\n \n # Form for handling BlogPost in the Admin interface\n class BlogPostAdminForm(forms.ModelForm):\n     class Meta:\n"
                },
                {
                    "date": 1734600717186,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,13 @@\n from django import forms\n from .models import BlogPost, Comment\n-from ckeditor_5.widgets import CKEditorWidget\n+from ckeditor_5.widgets import CKEditorWidget  # Import the CKEditor 5 widget\n \n # Form for handling BlogPost in the Admin interface\n class BlogPostAdminForm(forms.ModelForm):\n     class Meta:\n         model = BlogPost\n-        fields = ['title', 'content', 'image', 'video_url', 'author']  # 'quote' removed since CKEditor handles rich content\n+        fields = ['title', 'content', 'image', 'video_url', 'author']  # Specify the fields you want in the form\n         widgets = {\n             'content': CKEditorWidget(),  # Using CKEditor for the content field\n         }\n \n"
                },
                {
                    "date": 1734628361759,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,13 @@\n from django import forms\n from .models import BlogPost, Comment\n-from ckeditor_5.widgets import CKEditorWidget  # Import the CKEditor 5 widget\n+from ckeditor.widgets import CKEditorWidget  # Import CKEditorWidget\n \n # Form for handling BlogPost in the Admin interface\n class BlogPostAdminForm(forms.ModelForm):\n     class Meta:\n         model = BlogPost\n-        fields = ['title', 'content', 'image', 'video_url', 'author']  # Specify the fields you want in the form\n+        fields = ['title', 'content', 'image', 'video_url', 'author']  # 'quote' removed since CKEditor handles rich content\n         widgets = {\n             'content': CKEditorWidget(),  # Using CKEditor for the content field\n         }\n \n"
                },
                {
                    "date": 1734894026201,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n from django import forms\n from .models import BlogPost, Comment\n from ckeditor.widgets import CKEditorWidget  # Import CKEditorWidget\n+from django.contrib.auth.forms import AuthenticationForm\n \n # Form for handling BlogPost in the Admin interface\n class BlogPostAdminForm(forms.ModelForm):\n     class Meta:\n@@ -29,4 +30,11 @@\n         fields = ['content']\n         widgets = {\n             'content': forms.Textarea(attrs={'rows': 3, 'placeholder': 'Write your comment here...'}),\n         }\n+\n+\n+\n+class LoginForm(AuthenticationForm):\n+    username = forms.CharField(max_length=100, widget=forms.TextInput(attrs={'class': 'form-control', 'placeholder': 'Username'}))\n+    password = forms.CharField(widget=forms.PasswordInput(attrs={'class': 'form-control', 'placeholder': 'Password'}))\n+    \n\\ No newline at end of file\n"
                },
                {
                    "date": 1734894615816,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,10 @@\n from django import forms\n from .models import BlogPost, Comment\n from ckeditor.widgets import CKEditorWidget  # Import CKEditorWidget\n from django.contrib.auth.forms import AuthenticationForm\n-\n+from django.core.exceptions import ValidationError\n+from django.contrib.auth.models import User\n # Form for handling BlogPost in the Admin interface\n class BlogPostAdminForm(forms.ModelForm):\n     class Meta:\n         model = BlogPost\n@@ -36,5 +37,25 @@\n \n class LoginForm(AuthenticationForm):\n     username = forms.CharField(max_length=100, widget=forms.TextInput(attrs={'class': 'form-control', 'placeholder': 'Username'}))\n     password = forms.CharField(widget=forms.PasswordInput(attrs={'class': 'form-control', 'placeholder': 'Password'}))\n-    \n\\ No newline at end of file\n+    \n+    \n+\n+class SignUpForm(forms.ModelForm):\n+    email = forms.EmailField(widget=forms.EmailInput(attrs={'class': 'form-control', 'placeholder': 'Email'}))\n+    phone_number = forms.CharField(max_length=15, widget=forms.TextInput(attrs={'class': 'form-control', 'placeholder': 'Phone Number'}))\n+    date_of_birth = forms.DateField(required=False, widget=forms.DateInput(attrs={'class': 'form-control', 'placeholder': 'Date of Birth (optional)', 'type': 'date'}))\n+    gender = forms.ChoiceField(choices=[('M', 'Male'), ('F', 'Female')], widget=forms.Select(attrs={'class': 'form-control'}))\n+    username = forms.CharField(max_length=100, widget=forms.TextInput(attrs={'class': 'form-control', 'placeholder': 'Username'}))\n+    password = forms.CharField(widget=forms.PasswordInput(attrs={'class': 'form-control', 'placeholder': 'Password'}))\n+    profile_picture = forms.ImageField(required=False, widget=forms.FileInput(attrs={'class': 'form-control'}))\n+\n+    class Meta:\n+        model = User\n+        fields = ['email', 'username', 'password']\n+\n+    def clean_email(self):\n+        email = self.cleaned_data.get('email')\n+        if User.objects.filter(email=email).exists():\n+            raise ValidationError(\"Email is already in use.\")\n+        return email\n\\ No newline at end of file\n"
                },
                {
                    "date": 1734902284788,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,12 +35,22 @@\n \n \n \n class LoginForm(AuthenticationForm):\n-    username = forms.CharField(max_length=100, widget=forms.TextInput(attrs={'class': 'form-control', 'placeholder': 'Username'}))\n-    password = forms.CharField(widget=forms.PasswordInput(attrs={'class': 'form-control', 'placeholder': 'Password'}))\n+    username = forms.CharField(\n+        max_length=100,\n+        widget=forms.TextInput(attrs={\n+            'class': 'form-control',\n+            'placeholder': 'Username'\n+        })\n+    )\n+    password = forms.CharField(\n+        widget=forms.PasswordInput(attrs={\n+            'class': 'form-control',\n+            'placeholder': 'Password'\n+        })\n+    )  \n     \n-    \n \n class SignUpForm(forms.ModelForm):\n     email = forms.EmailField(widget=forms.EmailInput(attrs={'class': 'form-control', 'placeholder': 'Email'}))\n     phone_number = forms.CharField(max_length=15, widget=forms.TextInput(attrs={'class': 'form-control', 'placeholder': 'Phone Number'}))\n"
                },
                {
                    "date": 1734902299653,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,10 @@\n from django.contrib.auth.forms import AuthenticationForm\n from django.core.exceptions import ValidationError\n from django.contrib.auth.models import User\n # Form for handling BlogPost in the Admin interface\n+\n+\n class BlogPostAdminForm(forms.ModelForm):\n     class Meta:\n         model = BlogPost\n         fields = ['title', 'content', 'image', 'video_url', 'author']  # 'quote' removed since CKEditor handles rich content\n"
                },
                {
                    "date": 1734983496113,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,23 +51,20 @@\n             'placeholder': 'Password'\n         })\n     )  \n     \n+# forms.py\n+from django import forms\n+from django.contrib.auth.forms import UserCreationForm\n+from .models import CustomUser\n \n-class SignUpForm(forms.ModelForm):\n-    email = forms.EmailField(widget=forms.EmailInput(attrs={'class': 'form-control', 'placeholder': 'Email'}))\n-    phone_number = forms.CharField(max_length=15, widget=forms.TextInput(attrs={'class': 'form-control', 'placeholder': 'Phone Number'}))\n-    date_of_birth = forms.DateField(required=False, widget=forms.DateInput(attrs={'class': 'form-control', 'placeholder': 'Date of Birth (optional)', 'type': 'date'}))\n-    gender = forms.ChoiceField(choices=[('M', 'Male'), ('F', 'Female')], widget=forms.Select(attrs={'class': 'form-control'}))\n-    username = forms.CharField(max_length=100, widget=forms.TextInput(attrs={'class': 'form-control', 'placeholder': 'Username'}))\n-    password = forms.CharField(widget=forms.PasswordInput(attrs={'class': 'form-control', 'placeholder': 'Password'}))\n-    profile_picture = forms.ImageField(required=False, widget=forms.FileInput(attrs={'class': 'form-control'}))\n+class CustomUserCreationForm(UserCreationForm):\n+    # Additional fields for first name, last name, gender, phone number, and profile picture\n+    first_name = forms.CharField(max_length=30, required=True)\n+    last_name = forms.CharField(max_length=30, required=True)\n+    gender = forms.ChoiceField(choices=[('Male', 'Male'), ('Female', 'Female'), ('Other', 'Other')], required=True)\n+    phone_number = forms.CharField(max_length=15)\n\\ No newline at end of file\n+    profile_picture = forms.ImageField(required=False)\n \n     class Meta:\n-        model = User\n-        fields = ['email', 'username', 'password']\n-\n-    def clean_email(self):\n-        email = self.cleaned_data.get('email')\n-        if User.objects.filter(email=email).exists():\n-            raise ValidationError(\"Email is already in use.\")\n-        return email\n+        model = CustomUser\n+        fields = ('first_name', 'last_name', 'username', 'email', 'gender', 'phone_number', 'profile_picture')\n"
                },
                {
                    "date": 1734983521488,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,14 @@\n from django import forms\n from .models import BlogPost, Comment\n from ckeditor.widgets import CKEditorWidget  # Import CKEditorWidget\n-from django.contrib.auth.forms import AuthenticationForm\n+from django.contrib.auth.forms import AuthenticationForm, UserCreationForm\n from django.core.exceptions import ValidationError\n from django.contrib.auth.models import User\n # Form for handling BlogPost in the Admin interface\n+# forms.py\n+from .models import CustomUser\n \n-\n class BlogPostAdminForm(forms.ModelForm):\n     class Meta:\n         model = BlogPost\n         fields = ['title', 'content', 'image', 'video_url', 'author']  # 'quote' removed since CKEditor handles rich content\n@@ -51,13 +52,10 @@\n             'placeholder': 'Password'\n         })\n     )  \n     \n-# forms.py\n-from django import forms\n-from django.contrib.auth.forms import UserCreationForm\n-from .models import CustomUser\n \n+\n class CustomUserCreationForm(UserCreationForm):\n     # Additional fields for first name, last name, gender, phone number, and profile picture\n     first_name = forms.CharField(max_length=30, required=True)\n     last_name = forms.CharField(max_length=30, required=True)\n@@ -66,5 +64,5 @@\n     profile_picture = forms.ImageField(required=False)\n \n     class Meta:\n         model = CustomUser\n-        fields = ('first_name', 'last_name', 'username', 'email', 'gender', 'phone_number', 'profile_picture')\n\\ No newline at end of file\n+        fields = ('first_name', 'last_name', 'username', 'email', 'gender', 'phone_number', 'profile_picture')\n"
                },
                {
                    "date": 1734985848729,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,15 +54,20 @@\n     )  \n     \n \n \n+\n class CustomUserCreationForm(UserCreationForm):\n     # Additional fields for first name, last name, gender, phone number, and profile picture\n-    first_name = forms.CharField(max_length=30, required=True)\n-    last_name = forms.CharField(max_length=30, required=True)\n-    gender = forms.ChoiceField(choices=[('Male', 'Male'), ('Female', 'Female'), ('Other', 'Other')], required=True)\n-    phone_number = forms.CharField(max_length=15)\n-    profile_picture = forms.ImageField(required=False)\n+    first_name = forms.CharField(max_length=30, required=True, label=\"First Name\")\n+    last_name = forms.CharField(max_length=30, required=True, label=\"Last Name\")\n+    gender = forms.ChoiceField(\n+        choices=[('Male', 'Male'), ('Female', 'Female'), ('Other', 'Other')],\n+        required=True,\n+        label=\"Gender\"\n+    )\n+    phone_number = forms.CharField(max_length=15, required=False, label=\"Phone Number\")\n+    profile_picture = forms.ImageField(required=False, label=\"Profile Picture\")\n \n     class Meta:\n         model = CustomUser\n         fields = ('first_name', 'last_name', 'username', 'email', 'gender', 'phone_number', 'profile_picture')\n"
                }
            ],
            "date": 1734464869546,
            "name": "Commit-0",
            "content": "from django import forms \nfrom .models import BlogPost\n\n\nclass BlogPostForm(forms.ModelForm):\n    # Custom additional fields\n    content_extra = forms.CharField(\n        widget=forms.Textarea(attrs={'rows': 3, 'placeholder': 'Add another paragraph...'}),\n        required=False,\n        label=\"Additional Paragraph\"\n    )\n    image_extra = forms.ImageField(required=False, label=\"Additional Image\")\n    video_url_extra = forms.URLField(\n        widget=forms.URLInput(attrs={'placeholder': 'Paste video URL here...'}),\n        required=False,\n        label=\"Additional Video URL\"\n    )\n    quote_extra = forms.CharField(\n        widget=forms.Textarea(attrs={'rows': 2, 'placeholder': 'Add a quote...'}),\n        required=False,\n        label=\"Quote\"\n    )\n    \n    class Meta:\n        model = BlogPost\n        fields = ['title', 'content', 'quote', 'image', 'video_url', 'author']\n    \n    def save(self, commit=True):\n        blog_post = super().save(commit=False)\n        # Append additional paragraph to the main content if provided\n        content_extra = self.cleaned_data.get('content_extra')\n        if content_extra:\n            blog_post.content += f\"\\n\\n{'content_extra'}\"\n        \n        # Handle extra media (image and video) logic here if needed\n        # For now, we are only saving the main image and video fields\n        \n        if commit:\n            blog_post.save()\n        return blog_post"
        }
    ]
}