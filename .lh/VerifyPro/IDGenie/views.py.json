{
    "sourceFile": "VerifyPro/IDGenie/views.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 109,
            "patches": [
                {
                    "date": 1732961842027,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1732961849094,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,5 +13,6 @@\n     return render(request, 'IDGenie/index.html')\n \n \n def blogpost(request):\n+    \n     return render(request, 'IDGenie/blogpost.html')\n\\ No newline at end of file\n"
                },
                {
                    "date": 1732961934808,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,7 +12,7 @@\n \n     return render(request, 'IDGenie/index.html')\n \n \n-def blogpost(request):\n+def blogpost_view(request):\n     \n\\ No newline at end of file\n-    return render(request, 'IDGenie/blogpost.html')\n+    return render(request, 'IDGenie/blogpost_view.html')\n\\ No newline at end of file\n"
                },
                {
                    "date": 1732962010990,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,7 +12,7 @@\n \n     return render(request, 'IDGenie/index.html')\n \n \n-def blogpost_view(request):\n+def blogpost(request):\n     \n\\ No newline at end of file\n-    return render(request, 'IDGenie/blogpost_view.html')\n+    return render(request, 'IDGenie/blogpost.html')\n\\ No newline at end of file\n"
                },
                {
                    "date": 1733567971020,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,5 +14,6 @@\n \n \n def blogpost(request):\n     \n-    return render(request, 'IDGenie/blogpost.html')\n\\ No newline at end of file\n+    return render(request, 'IDGenie/blogpost.html')\n+\n"
                },
                {
                    "date": 1733568289832,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,17 +3,22 @@\n from django.http import  JsonResponse\n from django.contrib import messages\n from django.urls import reverse\n from django.conf import settings\n+from .models import BlogPost\n \n \n-\n # Create your views here.\n def index(request):\n-\n+    # Fetch the welcoming page of the site\n+    \n     return render(request, 'IDGenie/index.html')\n \n \n def blogpost(request):\n+    # Fetch all blog posts\n     \n-    return render(request, 'IDGenie/blogpost.html')\n+    posts = BlogPost.objects.all()\n+    return render(request, 'IDGenie/blogpost.html', {'posts': posts})\n \n+def blog_detail(request, post_id):\n+    \n\\ No newline at end of file\n"
                },
                {
                    "date": 1733568364550,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,16 +9,15 @@\n \n # Create your views here.\n def index(request):\n     # Fetch the welcoming page of the site\n-    \n     return render(request, 'IDGenie/index.html')\n \n \n def blogpost(request):\n     # Fetch all blog posts\n-    \n     posts = BlogPost.objects.all()\n     return render(request, 'IDGenie/blogpost.html', {'posts': posts})\n \n def blog_detail(request, post_id):\n+    # Fetch a single blog post by its id or return 404 if not foin\n     \n\\ No newline at end of file\n"
                },
                {
                    "date": 1733568898341,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-from django.shortcuts import render\n+from django.shortcuts import render, get_object_or_404\n from django.http import HttpResponse\n from django.http import  JsonResponse\n from django.contrib import messages\n from django.urls import reverse\n@@ -18,6 +18,9 @@\n     posts = BlogPost.objects.all()\n     return render(request, 'IDGenie/blogpost.html', {'posts': posts})\n \n def blog_detail(request, post_id):\n-    # Fetch a single blog post by its id or return 404 if not foin\n+    # Fetch a single blog post by its id or return 404 if not found\n+    post = get_object_or_404(BlogPost, id=post_id)\n+    return render(request, 'IDGenie/blog_detail.html', {'post': post})\n+    \n     \n\\ No newline at end of file\n"
                },
                {
                    "date": 1733569014394,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,11 +3,10 @@\n from django.http import  JsonResponse\n from django.contrib import messages\n from django.urls import reverse\n from django.conf import settings\n-from .models import BlogPost\n+from .models import BlogPost # Import your BlogPost model\n \n-\n # Create your views here.\n def index(request):\n     # Fetch the welcoming page of the site\n     return render(request, 'IDGenie/index.html')\n"
                },
                {
                    "date": 1734207916774,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,18 +1,22 @@\n-from django.shortcuts import render, get_object_or_404\n+from django.shortcuts import render, get_object_or_404, redirect\n from django.http import HttpResponse\n from django.http import  JsonResponse\n from django.contrib import messages\n from django.urls import reverse\n from django.conf import settings\n from .models import BlogPost # Import your BlogPost model\n+from django.contrib.auth.decorators import login_required\n \n+\n # Create your views here.\n def index(request):\n     # Fetch the welcoming page of the site\n     return render(request, 'IDGenie/index.html')\n+print(reverse('IDGenie:index'))\n \n \n+\n def blogpost(request):\n     # Fetch all blog posts\n     posts = BlogPost.objects.all()\n     return render(request, 'IDGenie/blogpost.html', {'posts': posts})\n@@ -21,5 +25,27 @@\n     # Fetch a single blog post by its id or return 404 if not found\n     post = get_object_or_404(BlogPost, id=post_id)\n     return render(request, 'IDGenie/blog_detail.html', {'post': post})\n     \n-    \n\\ No newline at end of file\n+    \n+# Blog Post Create View\n+@login_required\n+def create_blog_post(request):\n+    if request.method == 'POST':\n+        title = request.POST.get('title')\n+        content =request.POST.get('content')\n+        image = request.FILES.get('image') # File input for the image\n+        quote_or_video = request.POST.get('quote_or_video', '') # Optional quote or video embed\n+        \n+        # Create the blog post\n+        blog_post = BlogPost.objects.create(\n+            title=title,\n+            content=content,\n+            image=image,\n+            quote_or_video=quote_or_video,\n+            author=request.user\n+        )\n+        return redirect('IDGenie:blog') # Redirect to the blog list page after posting\n+    \n+    return render(request, 'IDGenie/create_blog_post.html') # Render the blog creation form\n+\n+\n"
                },
                {
                    "date": 1734207930840,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,8 @@\n \n # Create your views here.\n def index(request):\n     # Fetch the welcoming page of the site\n-    return render(request, 'IDGenie/index.html')\n print(reverse('IDGenie:index'))\n \n \n \n"
                },
                {
                    "date": 1734207999437,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,12 +10,11 @@\n \n # Create your views here.\n def index(request):\n     # Fetch the welcoming page of the site\n-print(reverse('IDGenie:index'))\n+    return render(request, 'IDGenie/index.html')\n \n \n-\n def blogpost(request):\n     # Fetch all blog posts\n     posts = BlogPost.objects.all()\n     return render(request, 'IDGenie/blogpost.html', {'posts': posts})\n"
                },
                {
                    "date": 1734208454697,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,12 +9,15 @@\n \n \n # Create your views here.\n def index(request):\n-    # Fetch the welcoming page of the site\n+    # Example of using reverse to redirect to the same index page\n+    url = reverse('IDGenie:index')  # Reverse the URL for the index view\n+    print(\"Resolved URL:\", url)  # Debugging: print resolved URL to console\n+\n+    # Render the index page\n     return render(request, 'IDGenie/index.html')\n \n-\n def blogpost(request):\n     # Fetch all blog posts\n     posts = BlogPost.objects.all()\n     return render(request, 'IDGenie/blogpost.html', {'posts': posts})\n"
                },
                {
                    "date": 1734208600402,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,15 +9,12 @@\n \n \n # Create your views here.\n def index(request):\n-    # Example of using reverse to redirect to the same index page\n-    url = reverse('IDGenie:index')  # Reverse the URL for the index view\n-    print(\"Resolved URL:\", url)  # Debugging: print resolved URL to console\n-\n-    # Render the index page\n+    # Fetch the welcoming page of the site\n     return render(request, 'IDGenie/index.html')\n \n+\n def blogpost(request):\n     # Fetch all blog posts\n     posts = BlogPost.objects.all()\n     return render(request, 'IDGenie/blogpost.html', {'posts': posts})\n"
                },
                {
                    "date": 1734208941847,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n \n # Create your views here.\n def index(request):\n     # Fetch the welcoming page of the site\n-    return render(request, 'IDGenie/index.html')\n+    return render(request, 'IDGenie:index.html')\n \n \n def blogpost(request):\n     # Fetch all blog posts\n"
                },
                {
                    "date": 1734209010623,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n \n # Create your views here.\n def index(request):\n     # Fetch the welcoming page of the site\n-    return render(request, 'IDGenie:index.html')\n+    return render(request, 'IDGenie/index.html')\n \n \n def blogpost(request):\n     # Fetch all blog posts\n"
                },
                {
                    "date": 1734210827337,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,8 +9,14 @@\n \n \n # Create your views here.\n def index(request):\n+    index = reverse('IDGenie:index')  # Reverse the URL dynamically\n+\n+\n+    # Pass the home_url to the template context\n+    context = {'index': index}\n+\n     # Fetch the welcoming page of the site\n     return render(request, 'IDGenie/index.html')\n \n \n"
                },
                {
                    "date": 1734210835406,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n     # Pass the home_url to the template context\n     context = {'index': index}\n \n     # Fetch the welcoming page of the site\n-    return render(request, 'IDGenie/index.html')\n+    return render(request, 'IDGenie/index.html', context)\n \n \n def blogpost(request):\n     # Fetch all blog posts\n"
                },
                {
                    "date": 1734210901743,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,16 +9,10 @@\n \n \n # Create your views here.\n def index(request):\n-    index = reverse('IDGenie:index')  # Reverse the URL dynamically\n-\n-\n-    # Pass the home_url to the template context\n-    context = {'index': index}\n-\n     # Fetch the welcoming page of the site\n-    return render(request, 'IDGenie/index.html', context)\n+    return render(request, 'IDGenie/index.html')\n \n \n def blogpost(request):\n     # Fetch all blog posts\n"
                },
                {
                    "date": 1734551843722,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,47 +3,46 @@\n from django.http import  JsonResponse\n from django.contrib import messages\n from django.urls import reverse\n from django.conf import settings\n-from .models import BlogPost # Import your BlogPost model\n-from django.contrib.auth.decorators import login_required\n+from .models import BlogPost, Comment # Import your BlogPost model\n+from .forms import CommentForm\n \n-\n # Create your views here.\n def index(request):\n     # Fetch the welcoming page of the site\n-    return render(request, 'IDGenie/index.html')\n+    blog_posts = BlogPost.objects.all()\n+    return render(request, 'IDGenie/index.html', {'blog_posts': blog_posts})\n \n \n def blogpost(request):\n-    # Fetch all blog posts\n-    posts = BlogPost.objects.all()\n-    return render(request, 'IDGenie/blogpost.html', {'posts': posts})\n+    blog_posts = BlogPost.objects.prefetch_related('comments').all()\n+    return render(request, 'IDGenie/blogpost.html', {'blog_posts': blog_posts})\n \n+\n def blog_detail(request, post_id):\n-    # Fetch a single blog post by its id or return 404 if not found\n-    post = get_object_or_404(BlogPost, id=post_id)\n-    return render(request, 'IDGenie/blog_detail.html', {'post': post})\n-    \n-    \n-# Blog Post Create View\n-@login_required\n-def create_blog_post(request):\n-    if request.method == 'POST':\n-        title = request.POST.get('title')\n-        content =request.POST.get('content')\n-        image = request.FILES.get('image') # File input for the image\n-        quote_or_video = request.POST.get('quote_or_video', '') # Optional quote or video embed\n-        \n-        # Create the blog post\n-        blog_post = BlogPost.objects.create(\n-            title=title,\n-            content=content,\n-            image=image,\n-            quote_or_video=quote_or_video,\n-            author=request.user\n-        )\n-        return redirect('IDGenie:blog') # Redirect to the blog list page after posting\n-    \n-    return render(request, 'IDGenie/create_blog_post.html') # Render the blog creation form\n+    # Fetch the specific blog post by ID or return a 404 error\n+    blog_post = get_object_or_404(BlogPost, id=post_id)\n+    comments = blog_post.comments.all()  # Fetch all related comments\n+    # Pass the blog post to the template\n+    return render(request, 'IDGenie/blog_detail.html', {'blog_post': blog_post, 'comments': comments})\n \n \n+# def blogpost(request):\n+#     # Fetch all blog posts\n+#     posts = BlogPost.objects.all()\n+#     return render(request, 'IDGenie/blogpost.html', {'posts': posts})\n+\n+# def blog_detail(request, post_id):\n+#     blog_post = get_object_or_404(BlogPost, id=post_id)\n+#     comments = blog_post.comments.all() # Get all comments for this blog post\n+#     if request.method == 'POST':\n+#         form = CommentForm(request.POST)\n+#         if form.is_valid():\n+#             comment = form.save(commit=False)\n+#             comment.blog_post = blog_post\n+#             comment.author = request.user   # Assuming the user is logged in\n+#             comment.save()\n+#             return redirect('IDGenie:blog_detail', post_id=post_id)\n+#         else:\n+#             form = CommentForm()\n+#         return render(request, 'IDGenie/blog_detail.html', {'blog_post': blog_post, 'comments': comments, 'form': form})\n\\ No newline at end of file\n"
                },
                {
                    "date": 1734590347452,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,15 +18,27 @@\n     blog_posts = BlogPost.objects.prefetch_related('comments').all()\n     return render(request, 'IDGenie/blogpost.html', {'blog_posts': blog_posts})\n \n \n-def blog_detail(request, post_id):\n-    # Fetch the specific blog post by ID or return a 404 error\n-    blog_post = get_object_or_404(BlogPost, id=post_id)\n-    comments = blog_post.comments.all()  # Fetch all related comments\n-    # Pass the blog post to the template\n-    return render(request, 'IDGenie/blog_detail.html', {'blog_post': blog_post, 'comments': comments})\n+def blog_post_detail(request, pk):\n+    blog_post = get_object_or_404(BlogPost, pk=pk)\n+    comments = blog_post.comments.all()  # Fetch comments related to the post\n+    \n+    if request.method == 'POST':\n+        content = request.POST.get('content')\n+        if content and request.user.is_authenticated:  # Ensure content is not empty\n+            Comment.objects.create(\n+                blog_post=blog_post,\n+                author=request.user,\n+                content=content,\n+                created_at=timezone.now()\n+            )\n+            return redirect('blog_post_detail', pk=pk)\n \n+    return render(request, 'blog/post_detail.html', {\n+        'blog_post': blog_post,\n+        'comments': comments\n+    })\n \n # def blogpost(request):\n #     # Fetch all blog posts\n #     posts = BlogPost.objects.all()\n"
                },
                {
                    "date": 1734590379684,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,9 @@\n from django.urls import reverse\n from django.conf import settings\n from .models import BlogPost, Comment # Import your BlogPost model\n from .forms import CommentForm\n+from django.utils import timezone\n \n # Create your views here.\n def index(request):\n     # Fetch the welcoming page of the site\n"
                },
                {
                    "date": 1734590445598,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n                 author=request.user,\n                 content=content,\n                 created_at=timezone.now()\n             )\n-            return redirect('blog_post_detail', pk=pk)\n+            return redirect('index', pk=pk)\n \n     return render(request, 'blog/post_detail.html', {\n         'blog_post': blog_post,\n         'comments': comments\n"
                },
                {
                    "date": 1734590459104,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n                 created_at=timezone.now()\n             )\n             return redirect('index', pk=pk)\n \n-    return render(request, 'blog/post_detail.html', {\n+    return render(request, 'IDGenie/blog_detail.html', {\n         'blog_post': blog_post,\n         'comments': comments\n     })\n \n"
                },
                {
                    "date": 1734590545293,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n     blog_posts = BlogPost.objects.prefetch_related('comments').all()\n     return render(request, 'IDGenie/blogpost.html', {'blog_posts': blog_posts})\n \n \n-def blog_post_detail(request, pk):\n+def blog_detail(request, pk):\n     blog_post = get_object_or_404(BlogPost, pk=pk)\n     comments = blog_post.comments.all()  # Fetch comments related to the post\n     \n     if request.method == 'POST':\n"
                },
                {
                    "date": 1734593786556,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,16 +18,18 @@\n def blogpost(request):\n     blog_posts = BlogPost.objects.prefetch_related('comments').all()\n     return render(request, 'IDGenie/blogpost.html', {'blog_posts': blog_posts})\n \n-\n def blog_detail(request, pk):\n     blog_post = get_object_or_404(BlogPost, pk=pk)\n-    comments = blog_post.comments.all()  # Fetch comments related to the post\n-    \n+    comments = blog_post.comments.all()\n+    paragraphs = blog_post.paragraphs.all()  # Related paragraphs\n+    images = blog_post.images.all()          # Related images\n+    quotes = blog_post.quotes.all()          # Related quotes\n+\n     if request.method == 'POST':\n         content = request.POST.get('content')\n-        if content and request.user.is_authenticated:  # Ensure content is not empty\n+        if content and request.user.is_authenticated:\n             Comment.objects.create(\n                 blog_post=blog_post,\n                 author=request.user,\n                 content=content,\n@@ -36,11 +38,15 @@\n             return redirect('index', pk=pk)\n \n     return render(request, 'IDGenie/blog_detail.html', {\n         'blog_post': blog_post,\n-        'comments': comments\n+        'comments': comments,\n+        'paragraphs': paragraphs,\n+        'images': images,\n+        'quotes': quotes,\n     })\n \n+\n # def blogpost(request):\n #     # Fetch all blog posts\n #     posts = BlogPost.objects.all()\n #     return render(request, 'IDGenie/blogpost.html', {'posts': posts})\n"
                },
                {
                    "date": 1734594792919,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,9 @@\n from django.conf import settings\n from .models import BlogPost, Comment # Import your BlogPost model\n from .forms import CommentForm\n from django.utils import timezone\n+from django.utils import timezone\n \n # Create your views here.\n def index(request):\n     # Fetch the welcoming page of the site\n@@ -25,8 +26,16 @@\n     paragraphs = blog_post.paragraphs.all()  # Related paragraphs\n     images = blog_post.images.all()          # Related images\n     quotes = blog_post.quotes.all()          # Related quotes\n \n+    # Check if the video_url is available and transform it\n+    if blog_post.video_url:\n+        # Replace 'watch?v=' with 'embed/' for the YouTube embed URL\n+        blog_post.video_embed_url = blog_post.video_url.replace('watch?v=', 'embed/')\n+    else:\n+        blog_post.video_embed_url = None  # If no video URL, set it to None\n+\n+    # Handle comment submission\n     if request.method == 'POST':\n         content = request.POST.get('content')\n         if content and request.user.is_authenticated:\n             Comment.objects.create(\n@@ -34,34 +43,14 @@\n                 author=request.user,\n                 content=content,\n                 created_at=timezone.now()\n             )\n-            return redirect('index', pk=pk)\n+            return redirect('blog_detail', pk=pk)\n \n+    # Pass all data to the template\n     return render(request, 'IDGenie/blog_detail.html', {\n         'blog_post': blog_post,\n         'comments': comments,\n         'paragraphs': paragraphs,\n         'images': images,\n         'quotes': quotes,\n-    })\n-\n-\n-# def blogpost(request):\n-#     # Fetch all blog posts\n-#     posts = BlogPost.objects.all()\n-#     return render(request, 'IDGenie/blogpost.html', {'posts': posts})\n-\n-# def blog_detail(request, post_id):\n-#     blog_post = get_object_or_404(BlogPost, id=post_id)\n-#     comments = blog_post.comments.all() # Get all comments for this blog post\n-#     if request.method == 'POST':\n-#         form = CommentForm(request.POST)\n-#         if form.is_valid():\n-#             comment = form.save(commit=False)\n-#             comment.blog_post = blog_post\n-#             comment.author = request.user   # Assuming the user is logged in\n-#             comment.save()\n-#             return redirect('IDGenie:blog_detail', post_id=post_id)\n-#         else:\n\\ No newline at end of file\n-#             form = CommentForm()\n-#         return render(request, 'IDGenie/blog_detail.html', {'blog_post': blog_post, 'comments': comments, 'form': form})\n+    })\n\\ No newline at end of file\n"
                },
                {
                    "date": 1734594850227,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,8 @@\n from django.conf import settings\n from .models import BlogPost, Comment # Import your BlogPost model\n from .forms import CommentForm\n from django.utils import timezone\n-from django.utils import timezone\n \n # Create your views here.\n def index(request):\n     # Fetch the welcoming page of the site\n@@ -26,16 +25,8 @@\n     paragraphs = blog_post.paragraphs.all()  # Related paragraphs\n     images = blog_post.images.all()          # Related images\n     quotes = blog_post.quotes.all()          # Related quotes\n \n-    # Check if the video_url is available and transform it\n-    if blog_post.video_url:\n-        # Replace 'watch?v=' with 'embed/' for the YouTube embed URL\n-        blog_post.video_embed_url = blog_post.video_url.replace('watch?v=', 'embed/')\n-    else:\n-        blog_post.video_embed_url = None  # If no video URL, set it to None\n-\n-    # Handle comment submission\n     if request.method == 'POST':\n         content = request.POST.get('content')\n         if content and request.user.is_authenticated:\n             Comment.objects.create(\n@@ -43,14 +34,34 @@\n                 author=request.user,\n                 content=content,\n                 created_at=timezone.now()\n             )\n-            return redirect('blog_detail', pk=pk)\n+            return redirect('index', pk=pk)\n \n-    # Pass all data to the template\n     return render(request, 'IDGenie/blog_detail.html', {\n         'blog_post': blog_post,\n         'comments': comments,\n         'paragraphs': paragraphs,\n         'images': images,\n         'quotes': quotes,\n\\ No newline at end of file\n-    })\n+    })\n+\n+\n+# def blogpost(request):\n+#     # Fetch all blog posts\n+#     posts = BlogPost.objects.all()\n+#     return render(request, 'IDGenie/blogpost.html', {'posts': posts})\n+\n+# def blog_detail(request, post_id):\n+#     blog_post = get_object_or_404(BlogPost, id=post_id)\n+#     comments = blog_post.comments.all() # Get all comments for this blog post\n+#     if request.method == 'POST':\n+#         form = CommentForm(request.POST)\n+#         if form.is_valid():\n+#             comment = form.save(commit=False)\n+#             comment.blog_post = blog_post\n+#             comment.author = request.user   # Assuming the user is logged in\n+#             comment.save()\n+#             return redirect('IDGenie:blog_detail', post_id=post_id)\n+#         else:\n+#             form = CommentForm()\n+#         return render(request, 'IDGenie/blog_detail.html', {'blog_post': blog_post, 'comments': comments, 'form': form})\n\\ No newline at end of file\n"
                },
                {
                    "date": 1734595360765,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,11 +15,12 @@\n     return render(request, 'IDGenie/index.html', {'blog_posts': blog_posts})\n \n \n def blogpost(request):\n-    blog_posts = BlogPost.objects.prefetch_related('comments').all()\n+    blog_posts = BlogPost.objects.all()\n     return render(request, 'IDGenie/blogpost.html', {'blog_posts': blog_posts})\n \n+\n def blog_detail(request, pk):\n     blog_post = get_object_or_404(BlogPost, pk=pk)\n     comments = blog_post.comments.all()\n     paragraphs = blog_post.paragraphs.all()  # Related paragraphs\n"
                },
                {
                    "date": 1734639417871,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n \n def blog_detail(request, pk):\n     blog_post = get_object_or_404(BlogPost, pk=pk)\n     comments = blog_post.comments.all()\n-    paragraphs = blog_post.paragraphs.all()  # Related paragraphs\n+    content = blog_post.content.all()  # Related paragraphs\n     images = blog_post.images.all()          # Related images\n     quotes = blog_post.quotes.all()          # Related quotes\n \n     if request.method == 'POST':\n@@ -40,9 +40,9 @@\n \n     return render(request, 'IDGenie/blog_detail.html', {\n         'blog_post': blog_post,\n         'comments': comments,\n-        'paragraphs': paragraphs,\n+        'content': content,\n         'images': images,\n         'quotes': quotes,\n     })\n \n"
                },
                {
                    "date": 1734639431391,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n \n def blog_detail(request, pk):\n     blog_post = get_object_or_404(BlogPost, pk=pk)\n     comments = blog_post.comments.all()\n-    content = blog_post.content.all()  # Related paragraphs\n+    paragraphs = blog_post.paragraphs.all()  # Related paragraphs\n     images = blog_post.images.all()          # Related images\n     quotes = blog_post.quotes.all()          # Related quotes\n \n     if request.method == 'POST':\n@@ -40,9 +40,9 @@\n \n     return render(request, 'IDGenie/blog_detail.html', {\n         'blog_post': blog_post,\n         'comments': comments,\n-        'content': content,\n+        'paragraphs': paragraphs,\n         'images': images,\n         'quotes': quotes,\n     })\n \n"
                },
                {
                    "date": 1734639834260,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,12 +21,10 @@\n \n \n def blog_detail(request, pk):\n     blog_post = get_object_or_404(BlogPost, pk=pk)\n-    comments = blog_post.comments.all()\n-    paragraphs = blog_post.paragraphs.all()  # Related paragraphs\n-    images = blog_post.images.all()          # Related images\n-    quotes = blog_post.quotes.all()          # Related quotes\n+    comments = blog_post.comments.all()  # Related comments\n+    images = blog_post.images.all()      # Related images\n \n     if request.method == 'POST':\n         content = request.POST.get('content')\n         if content and request.user.is_authenticated:\n@@ -35,19 +33,16 @@\n                 author=request.user,\n                 content=content,\n                 created_at=timezone.now()\n             )\n-            return redirect('index', pk=pk)\n+            return redirect('blog_detail', pk=pk)  # Redirect to the same blog post page\n \n     return render(request, 'IDGenie/blog_detail.html', {\n         'blog_post': blog_post,\n         'comments': comments,\n-        'paragraphs': paragraphs,\n         'images': images,\n-        'quotes': quotes,\n     })\n \n-\n # def blogpost(request):\n #     # Fetch all blog posts\n #     posts = BlogPost.objects.all()\n #     return render(request, 'IDGenie/blogpost.html', {'posts': posts})\n"
                },
                {
                    "date": 1734881460753,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,24 +40,13 @@\n         'blog_post': blog_post,\n         'comments': comments,\n         'images': images,\n     })\n+    \n+    \n+from django.http import JsonResponse\n+from django.contrib.auth.decorators import login_required\n \n-# def blogpost(request):\n-#     # Fetch all blog posts\n-#     posts = BlogPost.objects.all()\n-#     return render(request, 'IDGenie/blogpost.html', {'posts': posts})\n-\n-# def blog_detail(request, post_id):\n-#     blog_post = get_object_or_404(BlogPost, id=post_id)\n-#     comments = blog_post.comments.all() # Get all comments for this blog post\n-#     if request.method == 'POST':\n-#         form = CommentForm(request.POST)\n-#         if form.is_valid():\n-#             comment = form.save(commit=False)\n-#             comment.blog_post = blog_post\n-#             comment.author = request.user   # Assuming the user is logged in\n-#             comment.save()\n\\ No newline at end of file\n-#             return redirect('IDGenie:blog_detail', post_id=post_id)\n-#         else:\n-#             form = CommentForm()\n-#         return render(request, 'IDGenie/blog_detail.html', {'blog_post': blog_post, 'comments': comments, 'form': form})\n+@login_required\n+def get_user_avatar(request):\n+    avatar_url = request.user.profile.avatar.url if request.user.profile.avatar else \"/path/to/default-avatar.png\"\n+    return JsonResponse({\"avatar_url\": avatar_url})\n"
                },
                {
                    "date": 1734894383245,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,16 @@\n from django.conf import settings\n from .models import BlogPost, Comment # Import your BlogPost model\n from .forms import CommentForm\n from django.utils import timezone\n+from django.http import JsonResponse\n+from django.contrib.auth.decorators import login_required\n+from django.contrib.auth import login, authenticate\n+from .forms import LoginForm\n \n+\n+\n+\n # Create your views here.\n def index(request):\n     # Fetch the welcoming page of the site\n     blog_posts = BlogPost.objects.all()\n@@ -42,11 +49,25 @@\n         'images': images,\n     })\n     \n     \n-from django.http import JsonResponse\n-from django.contrib.auth.decorators import login_required\n \n @login_required\n def get_user_avatar(request):\n     avatar_url = request.user.profile.avatar.url if request.user.profile.avatar else \"/path/to/default-avatar.png\"\n     return JsonResponse({\"avatar_url\": avatar_url})\n+\n+\n+# Login code\n+\n+def login_view(request):\n+    if request.method == 'POST':\n+        form = LoginForm(request.POST)\n+        if form.is_valid():\n+            user = authenticate(username=form.cleaned_data['username'], password=form.cleaned_data['password'])\n+            if user is not None:\n+                login(request, user)\n+                return redirect('index') # Redirect to the homepage or wherever you want\n+    else:\n+        form = LoginForm()\n+    \n+    return render(request, 'IDGenie/login.html', {'form': form})\n"
                },
                {
                    "date": 1734894642896,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n from django.utils import timezone\n from django.http import JsonResponse\n from django.contrib.auth.decorators import login_required\n from django.contrib.auth import login, authenticate\n-from .forms import LoginForm\n+from .forms import LoginForm, SignUpForm\n \n \n \n \n"
                },
                {
                    "date": 1734894657416,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n from django.http import  JsonResponse\n from django.contrib import messages\n from django.urls import reverse\n from django.conf import settings\n-from .models import BlogPost, Comment # Import your BlogPost model\n+from .models import BlogPost, Comment, Profile # Import your BlogPost model\n from .forms import CommentForm\n from django.utils import timezone\n from django.http import JsonResponse\n from django.contrib.auth.decorators import login_required\n"
                },
                {
                    "date": 1734894756191,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,12 +10,12 @@\n from django.http import JsonResponse\n from django.contrib.auth.decorators import login_required\n from django.contrib.auth import login, authenticate\n from .forms import LoginForm, SignUpForm\n+from django.contrib.auth.models import User\n \n \n \n-\n # Create your views here.\n def index(request):\n     # Fetch the welcoming page of the site\n     blog_posts = BlogPost.objects.all()\n@@ -70,4 +70,30 @@\n     else:\n         form = LoginForm()\n     \n     return render(request, 'IDGenie/login.html', {'form': form})\n+\n+\n+\n+# SignUp Page\n+\n+def signup_view(request):\n+    if request.method == 'POST':\n+        form = SignUpForm(request.POST, request.FILES)\n+        if form.is_valid():\n+            # Create the user\n+            user = form.save()\n+            user.set_password(form.cleaned_data['password'])\n+            user.save()\n+\n+            # Create and save the profile\n+            profile = Profile(user=user)\n+            profile.avatar = form.cleaned_data.get('profile_picture')\n+            profile.save()\n+\n+            # Login the user\n+            login(request, user)\n+            return redirect('index')  # Redirect to homepage or wherever you want\n+    else:\n+        form = SignUpForm()\n+\n+    return render(request, 'IDGenie/signup.html', {'form': form})\n\\ No newline at end of file\n"
                },
                {
                    "date": 1734902021382,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,21 +60,28 @@\n # Login code\n \n def login_view(request):\n     if request.method == 'POST':\n-        form = LoginForm(request.POST)\n+        form = AuthenticationForm(request, data=request.POST)\n         if form.is_valid():\n-            user = authenticate(username=form.cleaned_data['username'], password=form.cleaned_data['password'])\n+            username = form.cleaned_data.get('username')\n+            password = form.cleaned_data.get('password')\n+            user = authenticate(username=username, password=password)\n             if user is not None:\n                 login(request, user)\n-                return redirect('index') # Redirect to the homepage or wherever you want\n+                return redirect('index')  # Redirect to homepage or dashboard\n+            else:\n+                messages.error(request, \"Invalid username or password.\")\n+        else:\n+            messages.error(request, \"Invalid username or password.\")\n     else:\n-        form = LoginForm()\n-    \n-    return render(request, 'IDGenie/login.html', {'form': form})\n+        form = AuthenticationForm()\n \n+    return render(request, 'login.html', {'form': form})\n \n \n+\n+\n # SignUp Page\n \n def signup_view(request):\n     if request.method == 'POST':\n"
                },
                {
                    "date": 1734902139617,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,11 +11,12 @@\n from django.contrib.auth.decorators import login_required\n from django.contrib.auth import login, authenticate\n from .forms import LoginForm, SignUpForm\n from django.contrib.auth.models import User\n+from django.contrib import messages\n+from django.contrib.auth.forms import AuthenticationForm\n \n \n-\n # Create your views here.\n def index(request):\n     # Fetch the welcoming page of the site\n     blog_posts = BlogPost.objects.all()\n"
                },
                {
                    "date": 1734902463938,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,28 +61,28 @@\n # Login code\n \n def login_view(request):\n     if request.method == 'POST':\n-        form = AuthenticationForm(request, data=request.POST)\n+        form = LoginForm(request, data=request.POST)\n         if form.is_valid():\n-            username = form.cleaned_data.get('username')\n-            password = form.cleaned_data.get('password')\n-            user = authenticate(username=username, password=password)\n+            # Authenticate user\n+            username = form.cleaned_data['username']\n+            password = form.cleaned_data['password']\n+            user = authenticate(request, username=username, password=password)\n+\n             if user is not None:\n                 login(request, user)\n-                return redirect('index')  # Redirect to homepage or dashboard\n+                return redirect('home')  # Redirect to home or dashboard page\n             else:\n                 messages.error(request, \"Invalid username or password.\")\n         else:\n-            messages.error(request, \"Invalid username or password.\")\n+            messages.error(request, \"Invalid form submission.\")\n     else:\n-        form = AuthenticationForm()\n+        form = LoginForm()\n \n     return render(request, 'login.html', {'form': form})\n \n \n-\n-\n # SignUp Page\n \n def signup_view(request):\n     if request.method == 'POST':\n"
                },
                {
                    "date": 1734902489473,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,17 +70,17 @@\n             user = authenticate(request, username=username, password=password)\n \n             if user is not None:\n                 login(request, user)\n-                return redirect('home')  # Redirect to home or dashboard page\n+                return redirect('index')  # Redirect to home or dashboard page\n             else:\n                 messages.error(request, \"Invalid username or password.\")\n         else:\n             messages.error(request, \"Invalid form submission.\")\n     else:\n         form = LoginForm()\n \n-    return render(request, 'login.html', {'form': form})\n+    return render(request, 'IDGenie/login.html', {'form': form})\n \n \n # SignUp Page\n \n"
                },
                {
                    "date": 1734902697443,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,9 +78,9 @@\n             messages.error(request, \"Invalid form submission.\")\n     else:\n         form = LoginForm()\n \n-    return render(request, 'IDGenie/login.html', {'form': form})\n+    return render(request, 'login.html', {'form': form})\n \n \n # SignUp Page\n \n"
                },
                {
                    "date": 1734902714814,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,9 +78,9 @@\n             messages.error(request, \"Invalid form submission.\")\n     else:\n         form = LoginForm()\n \n-    return render(request, 'login.html', {'form': form})\n+    return render(request, 'IDGenie/login.html', {'form': form})\n \n \n # SignUp Page\n \n"
                },
                {
                    "date": 1734902816523,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,9 +70,9 @@\n             user = authenticate(request, username=username, password=password)\n \n             if user is not None:\n                 login(request, user)\n-                return redirect('index')  # Redirect to home or dashboard page\n+                return redirect('IDGenie:index')  # Redirect to home or dashboard page\n             else:\n                 messages.error(request, \"Invalid username or password.\")\n         else:\n             messages.error(request, \"Invalid form submission.\")\n"
                },
                {
                    "date": 1734903678871,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n from .forms import CommentForm\n from django.utils import timezone\n from django.http import JsonResponse\n from django.contrib.auth.decorators import login_required\n-from django.contrib.auth import login, authenticate\n+from django.contrib.auth import login, authenticate, logout\n from .forms import LoginForm, SignUpForm\n from django.contrib.auth.models import User\n from django.contrib import messages\n from django.contrib.auth.forms import AuthenticationForm\n@@ -81,10 +81,17 @@\n \n     return render(request, 'IDGenie/login.html', {'form': form})\n \n \n+\n+\n+def custom_logout(request):\n+    logout(request)\n+    return redirect('login')  # Redirect to login page after logging out\n+\n+\n+\n # SignUp Page\n-\n def signup_view(request):\n     if request.method == 'POST':\n         form = SignUpForm(request.POST, request.FILES)\n         if form.is_valid():\n"
                },
                {
                    "date": 1734903889999,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,9 +85,9 @@\n \n \n def custom_logout(request):\n     logout(request)\n-    return redirect('login')  # Redirect to login page after logging out\n+    return redirect('IDGenie:login')  # Redirect to login page after logging out\n \n \n \n # SignUp Page\n"
                },
                {
                    "date": 1734903925798,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,9 +85,9 @@\n \n \n def custom_logout(request):\n     logout(request)\n-    return redirect('IDGenie:login')  # Redirect to login page after logging out\n+    return redirect('IDGenie:index')  # Redirect to login page after logging out\n \n \n \n # SignUp Page\n"
                },
                {
                    "date": 1734983746817,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n from django.utils import timezone\n from django.http import JsonResponse\n from django.contrib.auth.decorators import login_required\n from django.contrib.auth import login, authenticate, logout\n-from .forms import LoginForm, SignUpForm\n+from .forms import LoginForm\n from django.contrib.auth.models import User\n from django.contrib import messages\n from django.contrib.auth.forms import AuthenticationForm\n \n"
                },
                {
                    "date": 1734984420410,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n from django.contrib import messages\n from django.urls import reverse\n from django.conf import settings\n from .models import BlogPost, Comment, Profile # Import your BlogPost model\n-from .forms import CommentForm\n+from .forms import CommentForm, CustomUserCreationForm\n from django.utils import timezone\n from django.http import JsonResponse\n from django.contrib.auth.decorators import login_required\n from django.contrib.auth import login, authenticate, logout\n@@ -89,26 +89,14 @@\n     return redirect('IDGenie:index')  # Redirect to login page after logging out\n \n \n \n-# SignUp Page\n-def signup_view(request):\n+# SignUp Pagedef register(request):\n     if request.method == 'POST':\n-        form = SignUpForm(request.POST, request.FILES)\n+        form = CustomUserCreationForm(request.POST, request.FILES)\n         if form.is_valid():\n-            # Create the user\n             user = form.save()\n-            user.set_password(form.cleaned_data['password'])\n-            user.save()\n-\n-            # Create and save the profile\n-            profile = Profile(user=user)\n-            profile.avatar = form.cleaned_data.get('profile_picture')\n-            profile.save()\n-\n-            # Login the user\n-            login(request, user)\n-            return redirect('index')  # Redirect to homepage or wherever you want\n+            login(request, user)  # Log in the user after registration\n+            return redirect('dashboard')  # Redirect to the dashboard or desired page\n\\ No newline at end of file\n     else:\n-        form = SignUpForm()\n-\n-    return render(request, 'IDGenie/signup.html', {'form': form})\n+        form = CustomUserCreationForm()\n+    return render(request, 'register.html', {'form': form})\n\\ No newline at end of file\n"
                },
                {
                    "date": 1734984426643,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n from django.contrib import messages\n from django.urls import reverse\n from django.conf import settings\n from .models import BlogPost, Comment, Profile # Import your BlogPost model\n-from .forms import CommentForm, CustomUserCreationForm\n+from .forms import  CustomUserCreationForm\n from django.utils import timezone\n from django.http import JsonResponse\n from django.contrib.auth.decorators import login_required\n from django.contrib.auth import login, authenticate, logout\n"
                },
                {
                    "date": 1734985635742,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,11 +12,10 @@\n from django.contrib.auth import login, authenticate, logout\n from .forms import LoginForm\n from django.contrib.auth.models import User\n from django.contrib import messages\n-from django.contrib.auth.forms import AuthenticationForm\n+# views.py\n \n-\n # Create your views here.\n def index(request):\n     # Fetch the welcoming page of the site\n     blog_posts = BlogPost.objects.all()\n@@ -89,14 +88,14 @@\n     return redirect('IDGenie:index')  # Redirect to login page after logging out\n \n \n \n-# SignUp Pagedef register(request):\n+def signup(request):\n     if request.method == 'POST':\n         form = CustomUserCreationForm(request.POST, request.FILES)\n         if form.is_valid():\n             user = form.save()\n-            login(request, user)  # Log in the user after registration\n-            return redirect('dashboard')  # Redirect to the dashboard or desired page\n+            login(request, user)  # Automatically log in the user after signup\n+            return redirect('home')  # Redirect to a home page or dashboard\n\\ No newline at end of file\n     else:\n         form = CustomUserCreationForm()\n-    return render(request, 'register.html', {'form': form})\n+    return render(request, 'signup.html', {'form': form})\n"
                },
                {
                    "date": 1735222956891,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,15 +3,15 @@\n from django.http import  JsonResponse\n from django.contrib import messages\n from django.urls import reverse\n from django.conf import settings\n-from .models import BlogPost, Comment, Profile # Import your BlogPost model\n+from .models import BlogPost, Comment # Import your BlogPost model\n from .forms import  CustomUserCreationForm\n from django.utils import timezone\n from django.http import JsonResponse\n from django.contrib.auth.decorators import login_required\n from django.contrib.auth import login, authenticate, logout\n-from .forms import LoginForm\n+from .forms import LoginForm, CommentForm\n from django.contrib.auth.models import User\n from django.contrib import messages\n # views.py\n \n@@ -32,30 +32,32 @@\n     comments = blog_post.comments.all()  # Related comments\n     images = blog_post.images.all()      # Related images\n \n     if request.method == 'POST':\n-        content = request.POST.get('content')\n-        if content and request.user.is_authenticated:\n-            Comment.objects.create(\n-                blog_post=blog_post,\n-                author=request.user,\n-                content=content,\n-                created_at=timezone.now()\n-            )\n-            return redirect('blog_detail', pk=pk)  # Redirect to the same blog post page\n+        form = CommentForm(request.POST)\n+        if form.is_valid() and request.user.is_authenticated:\n+            comment = form.save(commit=False)\n+            comment.blog_post = blog_post\n+            comment.author = request.user\n+            parent_id = request.POST.get('parent')  # Get the parent ID from the POST data\n+            if parent_id:  # If a parent comment ID is provided, set it\n+                parent_comment = Comment.objects.filter(id=parent_id).first()\n+                if parent_comment:\n+                    comment.parent = parent_comment\n+            comment.save()\n+            return redirect('blog/<int:pk>/', pk=pk)  # Redirect to the same blog post page\n \n+    else:\n+        form = CommentForm()  # Provide a blank form for GET requests\n+\n     return render(request, 'IDGenie/blog_detail.html', {\n         'blog_post': blog_post,\n         'comments': comments,\n         'images': images,\n-    })\n+        'form': form,  # Pass the form to the template\n+    })    \n     \n-    \n \n-@login_required\n-def get_user_avatar(request):\n-    avatar_url = request.user.profile.avatar.url if request.user.profile.avatar else \"/path/to/default-avatar.png\"\n-    return JsonResponse({\"avatar_url\": avatar_url})\n \n \n # Login code\n \n@@ -73,9 +75,9 @@\n                 return redirect('IDGenie:index')  # Redirect to home or dashboard page\n             else:\n                 messages.error(request, \"Invalid username or password.\")\n         else:\n-            messages.error(request, \"Invalid form submission.\")\n+            messages.error(request, \"Invalid username or password.\")\n     else:\n         form = LoginForm()\n \n     return render(request, 'IDGenie/login.html', {'form': form})\n@@ -87,15 +89,25 @@\n     logout(request)\n     return redirect('IDGenie:index')  # Redirect to login page after logging out\n \n \n-\n-def signup(request):\n+def signup_view(request):\n     if request.method == 'POST':\n         form = CustomUserCreationForm(request.POST, request.FILES)\n         if form.is_valid():\n+            # Debugging: Check form validation success\n+            print(\"Form is valid!\")  # Add this for debugging\n             user = form.save()\n-            login(request, user)  # Automatically log in the user after signup\n-            return redirect('home')  # Redirect to a home page or dashboard\n\\ No newline at end of file\n+            login(request, user)  # Log the user in after successful registration\n+            messages.success(request, 'Your account has been created successfully!')\n+            return redirect('/')  # Redirect to the desired page (like home or dashboard)\n+        else:\n+            # Debugging: Check form errors\n+            print(form.errors)  # Add this to check form errors\n+            for field, errors in form.errors.items():\n+                for error in errors:\n+                    messages.error(request, f\"{field.capitalize()}: {error}\")\n+            \n+            return render(request, 'IDGenie/signup.html', {'form': form})\n     else:\n-        form = CustomUserCreationForm()\n-    return render(request, 'signup.html', {'form': form})\n+        form = CustomUserCreationForm()  # Create an empty form for GET requests\n+    return render(request, 'IDGenie/signup.html', {'form': form})\n"
                },
                {
                    "date": 1735222983210,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,9 @@\n                 parent_comment = Comment.objects.filter(id=parent_id).first()\n                 if parent_comment:\n                     comment.parent = parent_comment\n             comment.save()\n-            return redirect('blog/<int:pk>/', pk=pk)  # Redirect to the same blog post page\n+            return redirect('blog_detail.html', pk=pk)  # Redirect to the same blog post page\n \n     else:\n         form = CommentForm()  # Provide a blank form for GET requests\n \n"
                },
                {
                    "date": 1735222997866,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,9 @@\n                 parent_comment = Comment.objects.filter(id=parent_id).first()\n                 if parent_comment:\n                     comment.parent = parent_comment\n             comment.save()\n-            return redirect('blog_detail.html', pk=pk)  # Redirect to the same blog post page\n+            return redirect('IDGenie:blog_detail', pk=pk)  # Redirect to the same blog post page\n \n     else:\n         form = CommentForm()  # Provide a blank form for GET requests\n \n"
                },
                {
                    "date": 1735223030458,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,9 @@\n                 parent_comment = Comment.objects.filter(id=parent_id).first()\n                 if parent_comment:\n                     comment.parent = parent_comment\n             comment.save()\n-            return redirect('IDGenie:blog_detail', pk=pk)  # Redirect to the same blog post page\n+            return redirect('IDGenie:index', pk=pk)  # Redirect to the same blog post page\n \n     else:\n         form = CommentForm()  # Provide a blank form for GET requests\n \n"
                },
                {
                    "date": 1735223075727,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,9 @@\n                 parent_comment = Comment.objects.filter(id=parent_id).first()\n                 if parent_comment:\n                     comment.parent = parent_comment\n             comment.save()\n-            return redirect('IDGenie:index', pk=pk)  # Redirect to the same blog post page\n+            return redirect('/', pk=pk)  # Redirect to the same blog post page\n \n     else:\n         form = CommentForm()  # Provide a blank form for GET requests\n \n"
                },
                {
                    "date": 1735227725737,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,21 +32,46 @@\n     comments = blog_post.comments.all()  # Related comments\n     images = blog_post.images.all()      # Related images\n \n     if request.method == 'POST':\n-        form = CommentForm(request.POST)\n-        if form.is_valid() and request.user.is_authenticated:\n-            comment = form.save(commit=False)\n-            comment.blog_post = blog_post\n-            comment.author = request.user\n-            parent_id = request.POST.get('parent')  # Get the parent ID from the POST data\n-            if parent_id:  # If a parent comment ID is provided, set it\n-                parent_comment = Comment.objects.filter(id=parent_id).first()\n-                if parent_comment:\n-                    comment.parent = parent_comment\n-            comment.save()\n-            return redirect('/', pk=pk)  # Redirect to the same blog post page\n+        if request.is_ajax():  # Handle AJAX requests for comments\n+            content = request.POST.get(\"content\")\n+            parent_id = request.POST.get(\"parent_id\")  # Will be empty for top-level comments\n+            \n+            if not content:\n+                return JsonResponse({\"error\": \"Comment content cannot be empty.\"}, status=400)\n+            \n+            # Create a new comment\n+            comment = Comment.objects.create(\n+                blog_post=blog_post,\n+                author=request.user,\n+                content=content,\n+                parent_id=parent_id if parent_id else None\n+            )\n+            \n+            # Return the new comment as JSON\n+            return JsonResponse({\n+                \"id\": comment.id,\n+                \"author\": comment.author.username,\n+                \"content\": comment.content,\n+                \"created_at\": comment.created_at.strftime(\"%B %d, %Y at %I:%M %p\"),\n+                \"parent_id\": parent_id,\n+            })\n \n+        else:  # Handle traditional form submission\n+            form = CommentForm(request.POST)\n+            if form.is_valid() and request.user.is_authenticated:\n+                comment = form.save(commit=False)\n+                comment.blog_post = blog_post\n+                comment.author = request.user\n+                parent_id = request.POST.get('parent')  # Get the parent ID from the POST data\n+                if parent_id:  # If a parent comment ID is provided, set it\n+                    parent_comment = Comment.objects.filter(id=parent_id).first()\n+                    if parent_comment:\n+                        comment.parent = parent_comment\n+                comment.save()\n+                return redirect('blog_detail', pk=pk)  # Redirect to the same blog post page\n+\n     else:\n         form = CommentForm()  # Provide a blank form for GET requests\n \n     return render(request, 'IDGenie/blog_detail.html', {\n@@ -54,9 +79,8 @@\n         'comments': comments,\n         'images': images,\n         'form': form,  # Pass the form to the template\n     })    \n-    \n \n \n \n # Login code\n"
                },
                {
                    "date": 1735228662791,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,9 +68,9 @@\n                     parent_comment = Comment.objects.filter(id=parent_id).first()\n                     if parent_comment:\n                         comment.parent = parent_comment\n                 comment.save()\n-                return redirect('blog_detail', pk=pk)  # Redirect to the same blog post page\n+                return redirect('IDGenie:blog_detail', pk=pk)  # Redirect to the same blog post page\n \n     else:\n         form = CommentForm()  # Provide a blank form for GET requests\n \n"
                },
                {
                    "date": 1735229229984,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,64 +26,10 @@\n     blog_posts = BlogPost.objects.all()\n     return render(request, 'IDGenie/blogpost.html', {'blog_posts': blog_posts})\n \n \n-def blog_detail(request, pk):\n-    blog_post = get_object_or_404(BlogPost, pk=pk)\n-    comments = blog_post.comments.all()  # Related comments\n-    images = blog_post.images.all()      # Related images\n \n-    if request.method == 'POST':\n-        if request.is_ajax():  # Handle AJAX requests for comments\n-            content = request.POST.get(\"content\")\n-            parent_id = request.POST.get(\"parent_id\")  # Will be empty for top-level comments\n-            \n-            if not content:\n-                return JsonResponse({\"error\": \"Comment content cannot be empty.\"}, status=400)\n-            \n-            # Create a new comment\n-            comment = Comment.objects.create(\n-                blog_post=blog_post,\n-                author=request.user,\n-                content=content,\n-                parent_id=parent_id if parent_id else None\n-            )\n-            \n-            # Return the new comment as JSON\n-            return JsonResponse({\n-                \"id\": comment.id,\n-                \"author\": comment.author.username,\n-                \"content\": comment.content,\n-                \"created_at\": comment.created_at.strftime(\"%B %d, %Y at %I:%M %p\"),\n-                \"parent_id\": parent_id,\n-            })\n \n-        else:  # Handle traditional form submission\n-            form = CommentForm(request.POST)\n-            if form.is_valid() and request.user.is_authenticated:\n-                comment = form.save(commit=False)\n-                comment.blog_post = blog_post\n-                comment.author = request.user\n-                parent_id = request.POST.get('parent')  # Get the parent ID from the POST data\n-                if parent_id:  # If a parent comment ID is provided, set it\n-                    parent_comment = Comment.objects.filter(id=parent_id).first()\n-                    if parent_comment:\n-                        comment.parent = parent_comment\n-                comment.save()\n-                return redirect('IDGenie:blog_detail', pk=pk)  # Redirect to the same blog post page\n-\n-    else:\n-        form = CommentForm()  # Provide a blank form for GET requests\n-\n-    return render(request, 'IDGenie/blog_detail.html', {\n-        'blog_post': blog_post,\n-        'comments': comments,\n-        'images': images,\n-        'form': form,  # Pass the form to the template\n-    })    \n-\n-\n-\n # Login code\n \n def login_view(request):\n     if request.method == 'POST':\n@@ -134,4 +80,65 @@\n             return render(request, 'IDGenie/signup.html', {'form': form})\n     else:\n         form = CustomUserCreationForm()  # Create an empty form for GET requests\n     return render(request, 'IDGenie/signup.html', {'form': form})\n+\n+\n+\n+\n+\n+def blog_detail(request, pk):\n+    # Get the blog post by primary key (pk)\n+    blog_post = get_object_or_404(BlogPost, pk=pk)\n+    comments = blog_post.comments.all()  # Related comments\n+    images = blog_post.images.all()      # Related images\n+\n+    # Handle POST requests\n+    if request.method == 'POST':\n+        if request.is_ajax():  # Handle AJAX requests for comments\n+            content = request.POST.get(\"content\")\n+            parent_id = request.POST.get(\"parent_id\")  # Will be empty for top-level comments\n+\n+            if not content:\n+                return JsonResponse({\"error\": \"Comment content cannot be empty.\"}, status=400)\n+\n+            # Create a new comment\n+            comment = Comment.objects.create(\n+                blog_post=blog_post,\n+                author=request.user,\n+                content=content,\n+                parent_id=parent_id if parent_id else None,\n+                created_at=timezone.now()\n+            )\n+\n+            # Return the new comment as JSON\n+            return JsonResponse({\n+                \"id\": comment.id,\n+                \"author\": comment.author.username,\n+                \"content\": comment.content,\n+                \"created_at\": comment.created_at.strftime(\"%B %d, %Y at %I:%M %p\"),\n+                \"parent_id\": parent_id,\n+            })\n+\n+        else:  # Handle traditional form submission for non-AJAX requests\n+            form = CommentForm(request.POST)\n+            if form.is_valid() and request.user.is_authenticated:\n+                comment = form.save(commit=False)\n+                comment.blog_post = blog_post\n+                comment.author = request.user\n+                parent_id = request.POST.get('parent')  # Get the parent ID from the POST data\n+                if parent_id:  # If a parent comment ID is provided, set it\n+                    parent_comment = Comment.objects.filter(id=parent_id).first()\n+                    if parent_comment:\n+                        comment.parent = parent_comment\n+                comment.save()\n+                return redirect('IDGenie:blog_detail', pk=pk)  # Redirect to the same blog post page\n+\n+    else:\n+        form = CommentForm()  # Provide a blank form for GET requests\n+\n+    return render(request, 'IDGenie/blog_detail.html', {\n+        'blog_post': blog_post,\n+        'comments': comments,\n+        'images': images,\n+        'form': form,  # Pass the form to the template\n+    })\n\\ No newline at end of file\n"
                },
                {
                    "date": 1735231352181,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,59 +86,61 @@\n \n \n \n def blog_detail(request, pk):\n-    # Get the blog post by primary key (pk)\n+    # Retrieve the blog post by its primary key (pk)\n     blog_post = get_object_or_404(BlogPost, pk=pk)\n-    comments = blog_post.comments.all()  # Related comments\n-    images = blog_post.images.all()      # Related images\n+    comments = blog_post.comments.all()  # Fetch related comments\n+    images = blog_post.images.all()      # Fetch related images\n \n-    # Handle POST requests\n+    # Handle POST requests (e.g., comment submissions)\n     if request.method == 'POST':\n-        if request.is_ajax():  # Handle AJAX requests for comments\n-            content = request.POST.get(\"content\")\n-            parent_id = request.POST.get(\"parent_id\")  # Will be empty for top-level comments\n+        # Check if the request is AJAX\n+        if request.headers.get('x-requested-with') == 'XMLHttpRequest':  # AJAX requests\n+            content = request.POST.get(\"content\", \"\").strip()\n+            parent_id = request.POST.get(\"parent_id\")  # Optional parent comment ID for replies\n \n             if not content:\n                 return JsonResponse({\"error\": \"Comment content cannot be empty.\"}, status=400)\n \n-            # Create a new comment\n+            # Create the comment\n             comment = Comment.objects.create(\n                 blog_post=blog_post,\n                 author=request.user,\n                 content=content,\n                 parent_id=parent_id if parent_id else None,\n-                created_at=timezone.now()\n+                created_at=now()\n             )\n \n-            # Return the new comment as JSON\n+            # Return the created comment data as JSON\n             return JsonResponse({\n                 \"id\": comment.id,\n                 \"author\": comment.author.username,\n                 \"content\": comment.content,\n                 \"created_at\": comment.created_at.strftime(\"%B %d, %Y at %I:%M %p\"),\n                 \"parent_id\": parent_id,\n             })\n \n-        else:  # Handle traditional form submission for non-AJAX requests\n+        else:  # Handle standard form submissions (non-AJAX)\n             form = CommentForm(request.POST)\n             if form.is_valid() and request.user.is_authenticated:\n                 comment = form.save(commit=False)\n                 comment.blog_post = blog_post\n                 comment.author = request.user\n-                parent_id = request.POST.get('parent')  # Get the parent ID from the POST data\n-                if parent_id:  # If a parent comment ID is provided, set it\n+                parent_id = request.POST.get('parent')  # Get parent ID from form\n+                if parent_id:  # Set parent if provided\n                     parent_comment = Comment.objects.filter(id=parent_id).first()\n\\ No newline at end of file\n                     if parent_comment:\n                         comment.parent = parent_comment\n                 comment.save()\n-                return redirect('IDGenie:blog_detail', pk=pk)  # Redirect to the same blog post page\n+                return redirect('blog_detail', pk=pk)  # Redirect back to blog detail\n \n-    else:\n-        form = CommentForm()  # Provide a blank form for GET requests\n+    else:  # Handle GET requests\n+        form = CommentForm()\n \n+    # Render the template with context\n     return render(request, 'IDGenie/blog_detail.html', {\n         'blog_post': blog_post,\n         'comments': comments,\n         'images': images,\n-        'form': form,  # Pass the form to the template\n-    })\n+        'form': form,\n+    })\n"
                },
                {
                    "date": 1735231359142,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -131,9 +131,9 @@\n                     parent_comment = Comment.objects.filter(id=parent_id).first()\n                     if parent_comment:\n                         comment.parent = parent_comment\n                 comment.save()\n-                return redirect('blog_detail', pk=pk)  # Redirect back to blog detail\n+                return redirect('IDGenie:blog_detail', pk=pk)  # Redirect back to blog detail\n \n     else:  # Handle GET requests\n         form = CommentForm()\n \n@@ -142,5 +142,5 @@\n         'blog_post': blog_post,\n         'comments': comments,\n         'images': images,\n         'form': form,\n-    })\n\\ No newline at end of file\n+    })\n"
                },
                {
                    "date": 1735231730574,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,10 +26,40 @@\n     blog_posts = BlogPost.objects.all()\n     return render(request, 'IDGenie/blogpost.html', {'blog_posts': blog_posts})\n \n \n+def blog_detail(request, pk):\n+    blog_post = get_object_or_404(BlogPost, pk=pk)\n+    comments = blog_post.comments.all()  # Related comments\n+    images = blog_post.images.all()      # Related images\n \n+    if request.method == 'POST':\n+        form = CommentForm(request.POST)\n+        if form.is_valid() and request.user.is_authenticated:\n+            comment = form.save(commit=False)\n+            comment.blog_post = blog_post\n+            comment.author = request.user\n+            parent_id = request.POST.get('parent')  # Get the parent ID from the POST data\n+            if parent_id:  # If a parent comment ID is provided, set it\n+                parent_comment = Comment.objects.filter(id=parent_id).first()\n+                if parent_comment:\n+                    comment.parent = parent_comment\n+            comment.save()\n+            return redirect('IDGenie:blog_detail', pk=pk)  # Redirect to the same blog post page\n \n+    else:\n+        form = CommentForm()  # Provide a blank form for GET requests\n+\n+    return render(request, 'IDGenie/blog_detail.html', {\n+        'blog_post': blog_post,\n+        'comments': comments,\n+        'images': images,\n+        'form': form,  # Pass the form to the template\n+    })    \n+    \n+\n+\n+\n # Login code\n \n def login_view(request):\n     if request.method == 'POST':\n@@ -80,67 +110,4 @@\n             return render(request, 'IDGenie/signup.html', {'form': form})\n     else:\n         form = CustomUserCreationForm()  # Create an empty form for GET requests\n     return render(request, 'IDGenie/signup.html', {'form': form})\n-\n-\n-\n-\n-\n-def blog_detail(request, pk):\n-    # Retrieve the blog post by its primary key (pk)\n-    blog_post = get_object_or_404(BlogPost, pk=pk)\n-    comments = blog_post.comments.all()  # Fetch related comments\n-    images = blog_post.images.all()      # Fetch related images\n-\n-    # Handle POST requests (e.g., comment submissions)\n-    if request.method == 'POST':\n-        # Check if the request is AJAX\n-        if request.headers.get('x-requested-with') == 'XMLHttpRequest':  # AJAX requests\n-            content = request.POST.get(\"content\", \"\").strip()\n-            parent_id = request.POST.get(\"parent_id\")  # Optional parent comment ID for replies\n-\n-            if not content:\n-                return JsonResponse({\"error\": \"Comment content cannot be empty.\"}, status=400)\n-\n-            # Create the comment\n-            comment = Comment.objects.create(\n-                blog_post=blog_post,\n-                author=request.user,\n-                content=content,\n-                parent_id=parent_id if parent_id else None,\n-                created_at=now()\n-            )\n-\n-            # Return the created comment data as JSON\n-            return JsonResponse({\n-                \"id\": comment.id,\n-                \"author\": comment.author.username,\n-                \"content\": comment.content,\n-                \"created_at\": comment.created_at.strftime(\"%B %d, %Y at %I:%M %p\"),\n-                \"parent_id\": parent_id,\n-            })\n-\n-        else:  # Handle standard form submissions (non-AJAX)\n-            form = CommentForm(request.POST)\n-            if form.is_valid() and request.user.is_authenticated:\n-                comment = form.save(commit=False)\n-                comment.blog_post = blog_post\n-                comment.author = request.user\n-                parent_id = request.POST.get('parent')  # Get parent ID from form\n-                if parent_id:  # Set parent if provided\n-                    parent_comment = Comment.objects.filter(id=parent_id).first()\n-                    if parent_comment:\n-                        comment.parent = parent_comment\n-                comment.save()\n-                return redirect('IDGenie:blog_detail', pk=pk)  # Redirect back to blog detail\n-\n-    else:  # Handle GET requests\n-        form = CommentForm()\n-\n-    # Render the template with context\n-    return render(request, 'IDGenie/blog_detail.html', {\n-        'blog_post': blog_post,\n-        'comments': comments,\n-        'images': images,\n-        'form': form,\n-    })\n"
                },
                {
                    "date": 1735232393418,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,35 +28,36 @@\n \n \n def blog_detail(request, pk):\n     blog_post = get_object_or_404(BlogPost, pk=pk)\n-    comments = blog_post.comments.all()  # Related comments\n-    images = blog_post.images.all()      # Related images\n+    comments = blog_post.comments.all()\n+    images = blog_post.images.all()\n \n-    if request.method == 'POST':\n+    if request.method == 'POST' and request.is_ajax():\n         form = CommentForm(request.POST)\n         if form.is_valid() and request.user.is_authenticated:\n             comment = form.save(commit=False)\n             comment.blog_post = blog_post\n             comment.author = request.user\n-            parent_id = request.POST.get('parent')  # Get the parent ID from the POST data\n-            if parent_id:  # If a parent comment ID is provided, set it\n-                parent_comment = Comment.objects.filter(id=parent_id).first()\n-                if parent_comment:\n-                    comment.parent = parent_comment\n             comment.save()\n-            return redirect('IDGenie:blog_detail', pk=pk)  # Redirect to the same blog post page\n+            # Return the comment details as JSON\n+            return JsonResponse({\n+                'success': True,\n+                'username': comment.author.username,\n+                'profile_picture': comment.author.profile_picture.url if comment.author.profile_picture else None,\n+                'created_at': comment.created_at.strftime('%B %d, %Y at %I:%M %p'),\n+                'content': comment.content\n+            })\n \n-    else:\n-        form = CommentForm()  # Provide a blank form for GET requests\n+        return JsonResponse({'success': False, 'errors': form.errors})\n \n+    form = CommentForm()\n     return render(request, 'IDGenie/blog_detail.html', {\n         'blog_post': blog_post,\n         'comments': comments,\n         'images': images,\n-        'form': form,  # Pass the form to the template\n-    })    \n-    \n+        'form': form,\n+    })\n \n \n \n # Login code\n"
                },
                {
                    "date": 1735232649663,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,30 +28,32 @@\n \n \n def blog_detail(request, pk):\n     blog_post = get_object_or_404(BlogPost, pk=pk)\n-    comments = blog_post.comments.all()\n-    images = blog_post.images.all()\n+    comments = blog_post.comments.all()  # Related comments\n+    images = blog_post.images.all()      # Related images\n \n-    if request.method == 'POST' and request.is_ajax():\n-        form = CommentForm(request.POST)\n-        if form.is_valid() and request.user.is_authenticated:\n-            comment = form.save(commit=False)\n-            comment.blog_post = blog_post\n-            comment.author = request.user\n-            comment.save()\n-            # Return the comment details as JSON\n-            return JsonResponse({\n-                'success': True,\n-                'username': comment.author.username,\n-                'profile_picture': comment.author.profile_picture.url if comment.author.profile_picture else None,\n-                'created_at': comment.created_at.strftime('%B %d, %Y at %I:%M %p'),\n-                'content': comment.content\n-            })\n+    if request.method == 'POST' and request.headers.get('x-requested-with') == 'XMLHttpRequest':\n+        if request.user.is_authenticated:\n+            content = request.POST.get('content', '').strip()\n+            if content:\n+                comment = Comment.objects.create(\n+                    blog_post=blog_post,\n+                    author=request.user,\n+                    content=content\n+                )\n+                # Return the new comment data as JSON\n+                return JsonResponse({\n+                    'id': comment.id,\n+                    'author': comment.author.username,\n+                    'content': comment.content,\n+                    'created_at': comment.created_at.strftime('%B %d, %Y at %I:%M %p')\n+                })\n+            return JsonResponse({'error': 'Comment content cannot be empty.'}, status=400)\n+        return JsonResponse({'error': 'User must be logged in to post comments.'}, status=403)\n \n-        return JsonResponse({'success': False, 'errors': form.errors})\n+    form = CommentForm()  # Provide a blank form for GET requests\n \n-    form = CommentForm()\n     return render(request, 'IDGenie/blog_detail.html', {\n         'blog_post': blog_post,\n         'comments': comments,\n         'images': images,\n"
                },
                {
                    "date": 1735233201813,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,17 +32,18 @@\n     comments = blog_post.comments.all()  # Related comments\n     images = blog_post.images.all()      # Related images\n \n     if request.method == 'POST' and request.headers.get('x-requested-with') == 'XMLHttpRequest':\n+        print(request.POST)  # Debugging: log the POST data\n+\n         if request.user.is_authenticated:\n             content = request.POST.get('content', '').strip()\n             if content:\n                 comment = Comment.objects.create(\n                     blog_post=blog_post,\n                     author=request.user,\n                     content=content\n                 )\n-                # Return the new comment data as JSON\n                 return JsonResponse({\n                     'id': comment.id,\n                     'author': comment.author.username,\n                     'content': comment.content,\n@@ -50,9 +51,9 @@\n                 })\n             return JsonResponse({'error': 'Comment content cannot be empty.'}, status=400)\n         return JsonResponse({'error': 'User must be logged in to post comments.'}, status=403)\n \n-    form = CommentForm()  # Provide a blank form for GET requests\n+    form = CommentForm()\n \n     return render(request, 'IDGenie/blog_detail.html', {\n         'blog_post': blog_post,\n         'comments': comments,\n@@ -61,8 +62,9 @@\n     })\n \n \n \n+\n # Login code\n \n def login_view(request):\n     if request.method == 'POST':\n"
                },
                {
                    "date": 1735235981337,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,8 @@\n def blogpost(request):\n     blog_posts = BlogPost.objects.all()\n     return render(request, 'IDGenie/blogpost.html', {'blog_posts': blog_posts})\n \n-\n def blog_detail(request, pk):\n     blog_post = get_object_or_404(BlogPost, pk=pk)\n     comments = blog_post.comments.all()  # Related comments\n     images = blog_post.images.all()      # Related images\n@@ -42,15 +41,22 @@\n                     blog_post=blog_post,\n                     author=request.user,\n                     content=content\n                 )\n+\n+                # Get the user's profile picture URL (ensure you have this field in your User model or Profile model)\n+                profile_picture_url = request.user.profile.profile_picture.url if hasattr(request.user, 'profile') and request.user.profile.profile_picture else None\n+\n                 return JsonResponse({\n                     'id': comment.id,\n                     'author': comment.author.username,\n                     'content': comment.content,\n-                    'created_at': comment.created_at.strftime('%B %d, %Y at %I:%M %p')\n+                    'created_at': comment.created_at.strftime('%B %d, %Y at %I:%M %p'),\n+                    'profile_picture_url': profile_picture_url  # Include profile picture URL\n                 })\n+\n             return JsonResponse({'error': 'Comment content cannot be empty.'}, status=400)\n+        \n         return JsonResponse({'error': 'User must be logged in to post comments.'}, status=403)\n \n     form = CommentForm()\n \n@@ -61,10 +67,8 @@\n         'form': form,\n     })\n \n \n-\n-\n # Login code\n \n def login_view(request):\n     if request.method == 'POST':\n"
                },
                {
                    "date": 1735236376523,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,9 @@\n                     'id': comment.id,\n                     'author': comment.author.username,\n                     'content': comment.content,\n                     'created_at': comment.created_at.strftime('%B %d, %Y at %I:%M %p'),\n-                    'profile_picture_url': profile_picture_url  # Include profile picture URL\n+                    'profile_picture_url': comment.author.profile.profile_picture.url if comment.author.profile.profile_picture else '{% static 'img/default-profile.jpg' %}'\n                 })\n \n             return JsonResponse({'error': 'Comment content cannot be empty.'}, status=400)\n         \n"
                },
                {
                    "date": 1735236532339,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,9 @@\n                     'id': comment.id,\n                     'author': comment.author.username,\n                     'content': comment.content,\n                     'created_at': comment.created_at.strftime('%B %d, %Y at %I:%M %p'),\n-                    'profile_picture_url': comment.author.profile.profile_picture.url if comment.author.profile.profile_picture else '{% static 'img/default-profile.jpg' %}'\n+                    'profile_picture_url': comment.author.profile_picture_url  # Include profile picture URL\n                 })\n \n             return JsonResponse({'error': 'Comment content cannot be empty.'}, status=400)\n         \n"
                },
                {
                    "date": 1735236600137,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,9 @@\n                     'id': comment.id,\n                     'author': comment.author.username,\n                     'content': comment.content,\n                     'created_at': comment.created_at.strftime('%B %d, %Y at %I:%M %p'),\n-                    'profile_picture_url': comment.author.profile_picture_url  # Include profile picture URL\n+                    'profile_picture_url': profile_picture_url  # Include profile picture URL\n                 })\n \n             return JsonResponse({'error': 'Comment content cannot be empty.'}, status=400)\n         \n"
                },
                {
                    "date": 1735236779717,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,16 +25,19 @@\n def blogpost(request):\n     blog_posts = BlogPost.objects.all()\n     return render(request, 'IDGenie/blogpost.html', {'blog_posts': blog_posts})\n \n+\n+\n+\n+\n def blog_detail(request, pk):\n     blog_post = get_object_or_404(BlogPost, pk=pk)\n     comments = blog_post.comments.all()  # Related comments\n     images = blog_post.images.all()      # Related images\n \n+    # Handle comment posting via Ajax\n     if request.method == 'POST' and request.headers.get('x-requested-with') == 'XMLHttpRequest':\n-        print(request.POST)  # Debugging: log the POST data\n-\n         if request.user.is_authenticated:\n             content = request.POST.get('content', '').strip()\n             if content:\n                 comment = Comment.objects.create(\n@@ -42,23 +45,24 @@\n                     author=request.user,\n                     content=content\n                 )\n \n-                # Get the user's profile picture URL (ensure you have this field in your User model or Profile model)\n-                profile_picture_url = request.user.profile.profile_picture.url if hasattr(request.user, 'profile') and request.user.profile.profile_picture else None\n+                # Get the profile picture URL\n+                profile_picture_url = request.user.profile.profile_picture.url if request.user.profile.profile_picture else None\n \n                 return JsonResponse({\n                     'id': comment.id,\n                     'author': comment.author.username,\n                     'content': comment.content,\n                     'created_at': comment.created_at.strftime('%B %d, %Y at %I:%M %p'),\n-                    'profile_picture_url': profile_picture_url  # Include profile picture URL\n+                    'profile_picture_url': profile_picture_url or '{% static 'img/default-profile.jpg' %}'  # Default image if none exists\n                 })\n \n             return JsonResponse({'error': 'Comment content cannot be empty.'}, status=400)\n-        \n+\n         return JsonResponse({'error': 'User must be logged in to post comments.'}, status=403)\n \n+    # Comment form for the page (in case the page is rendered normally)\n     form = CommentForm()\n \n     return render(request, 'IDGenie/blog_detail.html', {\n         'blog_post': blog_post,\n"
                },
                {
                    "date": 1735237154751,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,50 +29,11 @@\n \n \n \n \n-def blog_detail(request, pk):\n-    blog_post = get_object_or_404(BlogPost, pk=pk)\n-    comments = blog_post.comments.all()  # Related comments\n-    images = blog_post.images.all()      # Related images\n \n-    # Handle comment posting via Ajax\n-    if request.method == 'POST' and request.headers.get('x-requested-with') == 'XMLHttpRequest':\n-        if request.user.is_authenticated:\n-            content = request.POST.get('content', '').strip()\n-            if content:\n-                comment = Comment.objects.create(\n-                    blog_post=blog_post,\n-                    author=request.user,\n-                    content=content\n-                )\n \n-                # Get the profile picture URL\n-                profile_picture_url = request.user.profile.profile_picture.url if request.user.profile.profile_picture else None\n \n-                return JsonResponse({\n-                    'id': comment.id,\n-                    'author': comment.author.username,\n-                    'content': comment.content,\n-                    'created_at': comment.created_at.strftime('%B %d, %Y at %I:%M %p'),\n-                    'profile_picture_url': profile_picture_url or '{% static 'img/default-profile.jpg' %}'  # Default image if none exists\n-                })\n-\n-            return JsonResponse({'error': 'Comment content cannot be empty.'}, status=400)\n-\n-        return JsonResponse({'error': 'User must be logged in to post comments.'}, status=403)\n-\n-    # Comment form for the page (in case the page is rendered normally)\n-    form = CommentForm()\n-\n-    return render(request, 'IDGenie/blog_detail.html', {\n-        'blog_post': blog_post,\n-        'comments': comments,\n-        'images': images,\n-        'form': form,\n-    })\n-\n-\n # Login code\n \n def login_view(request):\n     if request.method == 'POST':\n@@ -123,4 +84,51 @@\n             return render(request, 'IDGenie/signup.html', {'form': form})\n     else:\n         form = CustomUserCreationForm()  # Create an empty form for GET requests\n     return render(request, 'IDGenie/signup.html', {'form': form})\n+\n+\n+\n+\n+def blog_detail(request, pk):\n+    blog_post = get_object_or_404(BlogPost, pk=pk)\n+    comments = blog_post.comments.all()  # Related comments\n+    images = blog_post.images.all()      # Related images\n+\n+    # Handle comment posting via Ajax\n+    if request.method == 'POST' and request.headers.get('x-requested-with') == 'XMLHttpRequest':\n+        if request.user.is_authenticated:\n+            content = request.POST.get('content', '').strip()\n+            if content:\n+                comment = Comment.objects.create(\n+                    blog_post=blog_post,\n+                    author=request.user,\n+                    content=content\n+                )\n+\n+                # Get the profile picture URL\n+                profile_picture_url = request.user.profile.profile_picture.url if hasattr(request.user, 'profile') and request.user.profile.profile_picture else None\n+                if not profile_picture_url:\n+                    profile_picture_url = '/static/img/default-profile.jpg'  # Provide a default image path\n+\n+                # Return the response with necessary data\n+                return JsonResponse({\n+                    'id': comment.id,\n+                    'author': comment.author.username,\n+                    'content': comment.content,\n+                    'created_at': comment.created_at.strftime('%B %d, %Y at %I:%M %p'),\n+                    'profile_picture_url': profile_picture_url\n+                })\n+\n+            return JsonResponse({'error': 'Comment content cannot be empty.'}, status=400)\n+\n+        return JsonResponse({'error': 'User must be logged in to post comments.'}, status=403)\n+\n+    # Comment form for the page (in case the page is rendered normally)\n+    form = CommentForm()\n+\n+    return render(request, 'IDGenie/blog_detail.html', {\n+        'blog_post': blog_post,\n+        'comments': comments,\n+        'images': images,\n+        'form': form,\n+    })\n\\ No newline at end of file\n"
                },
                {
                    "date": 1735237934681,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,9 +107,9 @@\n \n                 # Get the profile picture URL\n                 profile_picture_url = request.user.profile.profile_picture.url if hasattr(request.user, 'profile') and request.user.profile.profile_picture else None\n                 if not profile_picture_url:\n-                    profile_picture_url = '/static/img/default-profile.jpg'  # Provide a default image path\n+                    profile_picture_url = '/static/img/3 .jpg'  # Provide a default image path\n \n                 # Return the response with necessary data\n                 return JsonResponse({\n                     'id': comment.id,\n"
                },
                {
                    "date": 1735237974780,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,9 +107,9 @@\n \n                 # Get the profile picture URL\n                 profile_picture_url = request.user.profile.profile_picture.url if hasattr(request.user, 'profile') and request.user.profile.profile_picture else None\n                 if not profile_picture_url:\n-                    profile_picture_url = '/static/img/3 .jpg'  # Provide a default image path\n+                    profile_picture_url = '/static/img/default-profile.jpg'  # Provide a default image path\n \n                 # Return the response with necessary data\n                 return JsonResponse({\n                     'id': comment.id,\n"
                },
                {
                    "date": 1735238269995,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,15 +88,17 @@\n \n \n \n \n+\n def blog_detail(request, pk):\n     blog_post = get_object_or_404(BlogPost, pk=pk)\n     comments = blog_post.comments.all()  # Related comments\n     images = blog_post.images.all()      # Related images\n \n-    # Handle comment posting via Ajax\n     if request.method == 'POST' and request.headers.get('x-requested-with') == 'XMLHttpRequest':\n+        print(request.POST)  # Debugging: log the POST data\n+\n         if request.user.is_authenticated:\n             content = request.POST.get('content', '').strip()\n             if content:\n                 comment = Comment.objects.create(\n@@ -104,31 +106,25 @@\n                     author=request.user,\n                     content=content\n                 )\n \n-                # Get the profile picture URL\n-                profile_picture_url = request.user.profile.profile_picture.url if hasattr(request.user, 'profile') and request.user.profile.profile_picture else None\n-                if not profile_picture_url:\n-                    profile_picture_url = '/static/img/default-profile.jpg'  # Provide a default image path\n+                # Include the profile picture URL in the response\n+                profile_picture_url = request.user.profile.picture.url if hasattr(request.user, 'profile') else None\n \n-                # Return the response with necessary data\n                 return JsonResponse({\n                     'id': comment.id,\n                     'author': comment.author.username,\n                     'content': comment.content,\n                     'created_at': comment.created_at.strftime('%B %d, %Y at %I:%M %p'),\n                     'profile_picture_url': profile_picture_url\n                 })\n-\n             return JsonResponse({'error': 'Comment content cannot be empty.'}, status=400)\n-\n         return JsonResponse({'error': 'User must be logged in to post comments.'}, status=403)\n \n-    # Comment form for the page (in case the page is rendered normally)\n     form = CommentForm()\n \n     return render(request, 'IDGenie/blog_detail.html', {\n         'blog_post': blog_post,\n         'comments': comments,\n         'images': images,\n\\ No newline at end of file\n         'form': form,\n-    })\n+    })\n"
                },
                {
                    "date": 1735238577171,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,9 +88,8 @@\n \n \n \n \n-\n def blog_detail(request, pk):\n     blog_post = get_object_or_404(BlogPost, pk=pk)\n     comments = blog_post.comments.all()  # Related comments\n     images = blog_post.images.all()      # Related images\n@@ -106,17 +105,17 @@\n                     author=request.user,\n                     content=content\n                 )\n \n-                # Include the profile picture URL in the response\n-                profile_picture_url = request.user.profile.picture.url if hasattr(request.user, 'profile') else None\n+                # Retrieve profile picture URL for the logged-in user\n+                profile_picture_url = request.user.profile_picture.url if request.user.profile_picture else None\n \n                 return JsonResponse({\n                     'id': comment.id,\n                     'author': comment.author.username,\n                     'content': comment.content,\n                     'created_at': comment.created_at.strftime('%B %d, %Y at %I:%M %p'),\n-                    'profile_picture_url': profile_picture_url\n+                    'profile_picture_url': profile_picture_url  # Send the correct URL here\n                 })\n             return JsonResponse({'error': 'Comment content cannot be empty.'}, status=400)\n         return JsonResponse({'error': 'User must be logged in to post comments.'}, status=403)\n \n"
                },
                {
                    "date": 1735320728442,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,8 +87,12 @@\n     return render(request, 'IDGenie/signup.html', {'form': form})\n \n \n \n+from django.http import JsonResponse\n+from django.contrib.auth import get_user_model\n+from django.shortcuts import get_object_or_404\n+from .models import BlogPost, Comment\n \n def blog_detail(request, pk):\n     blog_post = get_object_or_404(BlogPost, pk=pk)\n     comments = blog_post.comments.all()  # Related comments\n@@ -125,5 +129,5 @@\n         'blog_post': blog_post,\n         'comments': comments,\n         'images': images,\n         'form': form,\n-    })\n\\ No newline at end of file\n+    })\n"
                },
                {
                    "date": 1735320855117,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,47 +87,39 @@\n     return render(request, 'IDGenie/signup.html', {'form': form})\n \n \n \n-from django.http import JsonResponse\n-from django.contrib.auth import get_user_model\n-from django.shortcuts import get_object_or_404\n-from .models import BlogPost, Comment\n \n def blog_detail(request, pk):\n     blog_post = get_object_or_404(BlogPost, pk=pk)\n-    comments = blog_post.comments.all()  # Related comments\n-    images = blog_post.images.all()      # Related images\n+    comments = blog_post.comments.all()\n+    images = blog_post.images.all()\n \n     if request.method == 'POST' and request.headers.get('x-requested-with') == 'XMLHttpRequest':\n-        print(request.POST)  # Debugging: log the POST data\n+        if not request.user.is_authenticated:\n+            # Redirect to login page for unauthenticated users\n+            return JsonResponse({'redirect_url': '/login/'}, status=403)\n+        \n+        content = request.POST.get('content', '').strip()\n+        if content:\n+            comment = Comment.objects.create(\n+                blog_post=blog_post,\n+                author=request.user,\n+                content=content\n+            )\n+            return JsonResponse({\n+                'id': comment.id,\n+                'author': comment.author.username,\n+                'content': comment.content,\n+                'created_at': comment.created_at.strftime('%B %d, %Y at %I:%M %p'),\n+                'profile_picture_url': comment.author.profile_picture.url if comment.author.profile_picture else '/static/img/default-profile.jpg'\n+            })\n+        return JsonResponse({'error': 'Comment content cannot be empty.'}, status=400)\n \n-        if request.user.is_authenticated:\n-            content = request.POST.get('content', '').strip()\n-            if content:\n-                comment = Comment.objects.create(\n-                    blog_post=blog_post,\n-                    author=request.user,\n-                    content=content\n-                )\n-\n-                # Retrieve profile picture URL for the logged-in user\n-                profile_picture_url = request.user.profile_picture.url if request.user.profile_picture else None\n-\n-                return JsonResponse({\n-                    'id': comment.id,\n-                    'author': comment.author.username,\n-                    'content': comment.content,\n-                    'created_at': comment.created_at.strftime('%B %d, %Y at %I:%M %p'),\n-                    'profile_picture_url': profile_picture_url  # Send the correct URL here\n-                })\n-            return JsonResponse({'error': 'Comment content cannot be empty.'}, status=400)\n-        return JsonResponse({'error': 'User must be logged in to post comments.'}, status=403)\n-\n     form = CommentForm()\n \n     return render(request, 'IDGenie/blog_detail.html', {\n         'blog_post': blog_post,\n         'comments': comments,\n         'images': images,\n         'form': form,\n-    })\n+    })\n\\ No newline at end of file\n"
                },
                {
                    "date": 1735321128895,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,39 +87,47 @@\n     return render(request, 'IDGenie/signup.html', {'form': form})\n \n \n \n+from django.http import JsonResponse\n+from django.contrib.auth import get_user_model\n+from django.shortcuts import get_object_or_404\n+from .models import BlogPost, Comment\n \n def blog_detail(request, pk):\n     blog_post = get_object_or_404(BlogPost, pk=pk)\n-    comments = blog_post.comments.all()\n-    images = blog_post.images.all()\n+    comments = blog_post.comments.all()  # Related comments\n+    images = blog_post.images.all()      # Related images\n \n     if request.method == 'POST' and request.headers.get('x-requested-with') == 'XMLHttpRequest':\n-        if not request.user.is_authenticated:\n-            # Redirect to login page for unauthenticated users\n-            return JsonResponse({'redirect_url': '/login/'}, status=403)\n-        \n-        content = request.POST.get('content', '').strip()\n-        if content:\n-            comment = Comment.objects.create(\n-                blog_post=blog_post,\n-                author=request.user,\n-                content=content\n-            )\n-            return JsonResponse({\n-                'id': comment.id,\n-                'author': comment.author.username,\n-                'content': comment.content,\n-                'created_at': comment.created_at.strftime('%B %d, %Y at %I:%M %p'),\n-                'profile_picture_url': comment.author.profile_picture.url if comment.author.profile_picture else '/static/img/default-profile.jpg'\n-            })\n-        return JsonResponse({'error': 'Comment content cannot be empty.'}, status=400)\n+        print(request.POST)  # Debugging: log the POST data\n \n+        if request.user.is_authenticated:\n\\ No newline at end of file\n+            content = request.POST.get('content', '').strip()\n+            if content:\n+                comment = Comment.objects.create(\n+                    blog_post=blog_post,\n+                    author=request.user,\n+                    content=content\n+                )\n+\n+                # Retrieve profile picture URL for the logged-in user\n+                profile_picture_url = request.user.profile_picture.url if request.user.profile_picture else None\n+\n+                return JsonResponse({\n+                    'id': comment.id,\n+                    'author': comment.author.username,\n+                    'content': comment.content,\n+                    'created_at': comment.created_at.strftime('%B %d, %Y at %I:%M %p'),\n+                    'profile_picture_url': profile_picture_url  # Send the correct URL here\n+                })\n+            return JsonResponse({'error': 'Comment content cannot be empty.'}, status=400)\n+        return JsonResponse({'error': 'User must be logged in to post comments.'}, status=403)\n+\n     form = CommentForm()\n \n     return render(request, 'IDGenie/blog_detail.html', {\n         'blog_post': blog_post,\n         'comments': comments,\n         'images': images,\n         'form': form,\n-    })\n+    })\n"
                },
                {
                    "date": 1735321567928,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,21 +87,16 @@\n     return render(request, 'IDGenie/signup.html', {'form': form})\n \n \n \n-from django.http import JsonResponse\n-from django.contrib.auth import get_user_model\n-from django.shortcuts import get_object_or_404\n-from .models import BlogPost, Comment\n+from django.urls import reverse\n \n def blog_detail(request, pk):\n     blog_post = get_object_or_404(BlogPost, pk=pk)\n     comments = blog_post.comments.all()  # Related comments\n     images = blog_post.images.all()      # Related images\n \n     if request.method == 'POST' and request.headers.get('x-requested-with') == 'XMLHttpRequest':\n-        print(request.POST)  # Debugging: log the POST data\n-\n         if request.user.is_authenticated:\n             content = request.POST.get('content', '').strip()\n             if content:\n                 comment = Comment.objects.create(\n@@ -109,25 +104,32 @@\n                     author=request.user,\n                     content=content\n                 )\n \n-                # Retrieve profile picture URL for the logged-in user\n                 profile_picture_url = request.user.profile_picture.url if request.user.profile_picture else None\n \n                 return JsonResponse({\n                     'id': comment.id,\n                     'author': comment.author.username,\n                     'content': comment.content,\n                     'created_at': comment.created_at.strftime('%B %d, %Y at %I:%M %p'),\n-                    'profile_picture_url': profile_picture_url  # Send the correct URL here\n+                    'profile_picture_url': profile_picture_url\n                 })\n             return JsonResponse({'error': 'Comment content cannot be empty.'}, status=400)\n-        return JsonResponse({'error': 'User must be logged in to post comments.'}, status=403)\n \n+        # Debug the login URL\n+        login_url = reverse('login')  # Replace 'login' with the name of your login view\n+        print(\"Redirecting unauthenticated user to:\", login_url)\n+\n+        return JsonResponse({\n+            'error': 'User must be logged in to post comments.',\n+            'login_url': login_url\n\\ No newline at end of file\n+        }, status=403)\n+\n     form = CommentForm()\n \n     return render(request, 'IDGenie/blog_detail.html', {\n         'blog_post': blog_post,\n         'comments': comments,\n         'images': images,\n         'form': form,\n-    })\n+    })\n"
                },
                {
                    "date": 1735321619889,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,9 +116,9 @@\n                 })\n             return JsonResponse({'error': 'Comment content cannot be empty.'}, status=400)\n \n         # Debug the login URL\n-        login_url = reverse('login')  # Replace 'login' with the name of your login view\n+        login_url = reverse('IDGenie:ogin')  # Replace 'login' with the name of your login view\n         print(\"Redirecting unauthenticated user to:\", login_url)\n \n         return JsonResponse({\n             'error': 'User must be logged in to post comments.',\n@@ -131,5 +131,5 @@\n         'blog_post': blog_post,\n         'comments': comments,\n         'images': images,\n         'form': form,\n-    })\n\\ No newline at end of file\n+    })\n"
                },
                {
                    "date": 1735321643488,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,9 +116,9 @@\n                 })\n             return JsonResponse({'error': 'Comment content cannot be empty.'}, status=400)\n \n         # Debug the login URL\n-        login_url = reverse('IDGenie:ogin')  # Replace 'login' with the name of your login view\n+        login_url = reverse('IDGenie:login')  # Replace 'login' with the name of your login view\n         print(\"Redirecting unauthenticated user to:\", login_url)\n \n         return JsonResponse({\n             'error': 'User must be logged in to post comments.',\n"
                },
                {
                    "date": 1735324209457,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,10 +87,56 @@\n     return render(request, 'IDGenie/signup.html', {'form': form})\n \n \n \n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+from django.http import JsonResponse\n+from django.shortcuts import get_object_or_404, render\n+from django.views.decorators.csrf import csrf_exempt\n from django.urls import reverse\n+from .models import BlogPost, Comment\n+from .forms import CommentForm\n \n+# Handle comment thumbs-up and thumbs-down updates\n+@csrf_exempt\n+def update_thumbs(request):\n+    if request.method == 'POST' and request.is_ajax():\n+        comment_id = request.POST.get('comment_id')\n+        action = request.POST.get('action')\n+\n+        # Retrieve the comment\n+        try:\n+            comment = Comment.objects.get(id=comment_id)\n+        except Comment.DoesNotExist:\n+            return JsonResponse({'error': 'Comment not found.'}, status=404)\n+\n+        if action == 'up':\n+            comment.thumbs_up_count += 1\n+        elif action == 'down':\n+            comment.thumbs_down_count += 1\n+        else:\n+            return JsonResponse({'error': 'Invalid action.'}, status=400)\n+\n+        # Save the updated counts\n+        comment.save()\n+\n+        return JsonResponse({\n+            'thumbs_up_count': comment.thumbs_up_count,\n+            'thumbs_down_count': comment.thumbs_down_count,\n+        })\n+\n+    return JsonResponse({'error': 'Invalid request.'}, status=400)\n+\n+# Blog detail view where comments are added\n def blog_detail(request, pk):\n     blog_post = get_object_or_404(BlogPost, pk=pk)\n     comments = blog_post.comments.all()  # Related comments\n     images = blog_post.images.all()      # Related images\n@@ -111,16 +157,16 @@\n                     'id': comment.id,\n                     'author': comment.author.username,\n                     'content': comment.content,\n                     'created_at': comment.created_at.strftime('%B %d, %Y at %I:%M %p'),\n-                    'profile_picture_url': profile_picture_url\n+                    'profile_picture_url': profile_picture_url,\n+                    'thumbs_up_count': comment.thumbs_up_count,\n+                    'thumbs_down_count': comment.thumbs_down_count,\n                 })\n             return JsonResponse({'error': 'Comment content cannot be empty.'}, status=400)\n \n-        # Debug the login URL\n+        # Redirect unauthenticated user to login\n         login_url = reverse('IDGenie:login')  # Replace 'login' with the name of your login view\n-        print(\"Redirecting unauthenticated user to:\", login_url)\n-\n         return JsonResponse({\n             'error': 'User must be logged in to post comments.',\n             'login_url': login_url\n         }, status=403)\n"
                },
                {
                    "date": 1735324748779,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,9 +107,10 @@\n \n # Handle comment thumbs-up and thumbs-down updates\n @csrf_exempt\n def update_thumbs(request):\n-    if request.method == 'POST' and request.is_ajax():\n+    # Check if the request is a POST request and contains the correct 'X-Requested-With' header\n+    if request.method == 'POST' and request.headers.get('X-Requested-With') == 'XMLHttpRequest':\n         comment_id = request.POST.get('comment_id')\n         action = request.POST.get('action')\n \n         # Retrieve the comment\n"
                },
                {
                    "date": 1735325421847,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,17 +109,22 @@\n @csrf_exempt\n def update_thumbs(request):\n     # Check if the request is a POST request and contains the correct 'X-Requested-With' header\n     if request.method == 'POST' and request.headers.get('X-Requested-With') == 'XMLHttpRequest':\n+        # Retrieve the POST data\n         comment_id = request.POST.get('comment_id')\n         action = request.POST.get('action')\n \n+        if not comment_id or not action:\n+            return JsonResponse({'error': 'Missing data.'}, status=400)\n+\n         # Retrieve the comment\n         try:\n             comment = Comment.objects.get(id=comment_id)\n         except Comment.DoesNotExist:\n             return JsonResponse({'error': 'Comment not found.'}, status=404)\n \n+        # Handle thumbs up/down\n         if action == 'up':\n             comment.thumbs_up_count += 1\n         elif action == 'down':\n             comment.thumbs_down_count += 1\n@@ -128,8 +133,9 @@\n \n         # Save the updated counts\n         comment.save()\n \n+        # Return updated counts in the response\n         return JsonResponse({\n             'thumbs_up_count': comment.thumbs_up_count,\n             'thumbs_down_count': comment.thumbs_down_count,\n         })\n"
                },
                {
                    "date": 1735325564325,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,8 +12,9 @@\n from django.contrib.auth import login, authenticate, logout\n from .forms import LoginForm, CommentForm\n from django.contrib.auth.models import User\n from django.contrib import messages\n+from django.views.decorators.csrf import csrf_exempt\n # views.py\n \n # Create your views here.\n def index(request):\n@@ -97,14 +98,8 @@\n \n \n \n \n-from django.http import JsonResponse\n-from django.shortcuts import get_object_or_404, render\n-from django.views.decorators.csrf import csrf_exempt\n-from django.urls import reverse\n-from .models import BlogPost, Comment\n-from .forms import CommentForm\n \n # Handle comment thumbs-up and thumbs-down updates\n @csrf_exempt\n def update_thumbs(request):\n"
                },
                {
                    "date": 1735326047469,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,42 +102,53 @@\n \n # Handle comment thumbs-up and thumbs-down updates\n @csrf_exempt\n def update_thumbs(request):\n-    # Check if the request is a POST request and contains the correct 'X-Requested-With' header\n-    if request.method == 'POST' and request.headers.get('X-Requested-With') == 'XMLHttpRequest':\n-        # Retrieve the POST data\n+    if request.method == 'POST' and request.is_ajax():\n         comment_id = request.POST.get('comment_id')\n         action = request.POST.get('action')\n \n-        if not comment_id or not action:\n-            return JsonResponse({'error': 'Missing data.'}, status=400)\n-\n         # Retrieve the comment\n         try:\n             comment = Comment.objects.get(id=comment_id)\n         except Comment.DoesNotExist:\n             return JsonResponse({'error': 'Comment not found.'}, status=404)\n \n-        # Handle thumbs up/down\n+        user = request.user\n+\n+        # Check if the user has already liked or disliked this comment\n         if action == 'up':\n+            if comment.user_has_liked(user):\n+                return JsonResponse({'error': 'You have already liked this comment.'}, status=400)\n+            if comment.user_has_disliked(user):\n+                comment.thumbs_down_count -= 1\n+                comment.disliked_by.remove(user)\n+\n             comment.thumbs_up_count += 1\n+            comment.liked_by.add(user)\n+\n         elif action == 'down':\n+            if comment.user_has_disliked(user):\n+                return JsonResponse({'error': 'You have already disliked this comment.'}, status=400)\n+            if comment.user_has_liked(user):\n+                comment.thumbs_up_count -= 1\n+                comment.liked_by.remove(user)\n+\n             comment.thumbs_down_count += 1\n+            comment.disliked_by.add(user)\n+\n         else:\n             return JsonResponse({'error': 'Invalid action.'}, status=400)\n \n         # Save the updated counts\n         comment.save()\n \n-        # Return updated counts in the response\n         return JsonResponse({\n             'thumbs_up_count': comment.thumbs_up_count,\n             'thumbs_down_count': comment.thumbs_down_count,\n         })\n \n     return JsonResponse({'error': 'Invalid request.'}, status=400)\n-\n # Blog detail view where comments are added\n def blog_detail(request, pk):\n     blog_post = get_object_or_404(BlogPost, pk=pk)\n     comments = blog_post.comments.all()  # Related comments\n"
                },
                {
                    "date": 1735326306082,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,9 +102,10 @@\n \n # Handle comment thumbs-up and thumbs-down updates\n @csrf_exempt\n def update_thumbs(request):\n-    if request.method == 'POST' and request.is_ajax():\n+    # Check if the request method is POST and if it's an AJAX request\n+    if request.method == 'POST' and request.headers.get('x-requested-with') == 'XMLHttpRequest':\n         comment_id = request.POST.get('comment_id')\n         action = request.POST.get('action')\n \n         # Retrieve the comment\n"
                },
                {
                    "date": 1735326639796,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,9 +102,8 @@\n \n # Handle comment thumbs-up and thumbs-down updates\n @csrf_exempt\n def update_thumbs(request):\n-    # Check if the request method is POST and if it's an AJAX request\n     if request.method == 'POST' and request.headers.get('x-requested-with') == 'XMLHttpRequest':\n         comment_id = request.POST.get('comment_id')\n         action = request.POST.get('action')\n \n@@ -117,20 +116,22 @@\n         user = request.user\n \n         # Check if the user has already liked or disliked this comment\n         if action == 'up':\n+            # Reject if the user has already liked this comment\n             if comment.user_has_liked(user):\n-                return JsonResponse({'error': 'You have already liked this comment.'}, status=400)\n+                return JsonResponse({}, status=200)  # Do nothing on second click, no response\n             if comment.user_has_disliked(user):\n                 comment.thumbs_down_count -= 1\n                 comment.disliked_by.remove(user)\n \n             comment.thumbs_up_count += 1\n             comment.liked_by.add(user)\n \n         elif action == 'down':\n+            # Reject if the user has already disliked this comment\n             if comment.user_has_disliked(user):\n-                return JsonResponse({'error': 'You have already disliked this comment.'}, status=400)\n+                return JsonResponse({}, status=200)  # Do nothing on second click, no response\n             if comment.user_has_liked(user):\n                 comment.thumbs_up_count -= 1\n                 comment.liked_by.remove(user)\n \n"
                },
                {
                    "date": 1735326945910,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -114,28 +114,33 @@\n             return JsonResponse({'error': 'Comment not found.'}, status=404)\n \n         user = request.user\n \n-        # Check if the user has already liked or disliked this comment\n         if action == 'up':\n-            # Reject if the user has already liked this comment\n+            # If the user has already liked this comment, do nothing\n             if comment.user_has_liked(user):\n                 return JsonResponse({}, status=200)  # Do nothing on second click, no response\n+\n+            # If the user has disliked, remove dislike\n             if comment.user_has_disliked(user):\n                 comment.thumbs_down_count -= 1\n                 comment.disliked_by.remove(user)\n \n+            # Add like and update count\n             comment.thumbs_up_count += 1\n             comment.liked_by.add(user)\n \n         elif action == 'down':\n-            # Reject if the user has already disliked this comment\n+            # If the user has already disliked this comment, do nothing\n             if comment.user_has_disliked(user):\n                 return JsonResponse({}, status=200)  # Do nothing on second click, no response\n+\n+            # If the user has liked, remove like\n             if comment.user_has_liked(user):\n                 comment.thumbs_up_count -= 1\n                 comment.liked_by.remove(user)\n \n+            # Add dislike and update count\n             comment.thumbs_down_count += 1\n             comment.disliked_by.add(user)\n \n         else:\n"
                },
                {
                    "date": 1735327290667,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,9 +100,8 @@\n \n \n \n # Handle comment thumbs-up and thumbs-down updates\n-@csrf_exempt\n def update_thumbs(request):\n     if request.method == 'POST' and request.headers.get('x-requested-with') == 'XMLHttpRequest':\n         comment_id = request.POST.get('comment_id')\n         action = request.POST.get('action')\n@@ -117,30 +116,30 @@\n \n         if action == 'up':\n             # If the user has already liked this comment, do nothing\n             if comment.user_has_liked(user):\n-                return JsonResponse({}, status=200)  # Do nothing on second click, no response\n+                return JsonResponse({}, status=200)  # Do nothing if thumbs up is already clicked\n \n-            # If the user has disliked, remove dislike\n+            # If the user has disliked, remove dislike and decrease the thumbs down count\n             if comment.user_has_disliked(user):\n                 comment.thumbs_down_count -= 1\n                 comment.disliked_by.remove(user)\n \n-            # Add like and update count\n+            # Increase thumbs up count and add user to liked users\n             comment.thumbs_up_count += 1\n             comment.liked_by.add(user)\n \n         elif action == 'down':\n             # If the user has already disliked this comment, do nothing\n             if comment.user_has_disliked(user):\n-                return JsonResponse({}, status=200)  # Do nothing on second click, no response\n+                return JsonResponse({}, status=200)  # Do nothing if thumbs down is already clicked\n \n-            # If the user has liked, remove like\n+            # If the user has liked, remove like and decrease the thumbs up count\n             if comment.user_has_liked(user):\n                 comment.thumbs_up_count -= 1\n                 comment.liked_by.remove(user)\n \n-            # Add dislike and update count\n+            # Increase thumbs down count and add user to disliked users\n             comment.thumbs_down_count += 1\n             comment.disliked_by.add(user)\n \n         else:\n"
                },
                {
                    "date": 1735327685579,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,53 +100,39 @@\n \n \n \n # Handle comment thumbs-up and thumbs-down updates\n+@csrf_exempt\n def update_thumbs(request):\n     if request.method == 'POST' and request.headers.get('x-requested-with') == 'XMLHttpRequest':\n         comment_id = request.POST.get('comment_id')\n         action = request.POST.get('action')\n \n-        # Retrieve the comment\n         try:\n             comment = Comment.objects.get(id=comment_id)\n         except Comment.DoesNotExist:\n             return JsonResponse({'error': 'Comment not found.'}, status=404)\n \n         user = request.user\n \n         if action == 'up':\n-            # If the user has already liked this comment, do nothing\n             if comment.user_has_liked(user):\n-                return JsonResponse({}, status=200)  # Do nothing if thumbs up is already clicked\n-\n-            # If the user has disliked, remove dislike and decrease the thumbs down count\n+                return JsonResponse({}, status=200)  # No action if already liked\n             if comment.user_has_disliked(user):\n                 comment.thumbs_down_count -= 1\n                 comment.disliked_by.remove(user)\n-\n-            # Increase thumbs up count and add user to liked users\n             comment.thumbs_up_count += 1\n             comment.liked_by.add(user)\n \n         elif action == 'down':\n-            # If the user has already disliked this comment, do nothing\n             if comment.user_has_disliked(user):\n-                return JsonResponse({}, status=200)  # Do nothing if thumbs down is already clicked\n-\n-            # If the user has liked, remove like and decrease the thumbs up count\n+                return JsonResponse({}, status=200)  # No action if already disliked\n             if comment.user_has_liked(user):\n                 comment.thumbs_up_count -= 1\n                 comment.liked_by.remove(user)\n-\n-            # Increase thumbs down count and add user to disliked users\n             comment.thumbs_down_count += 1\n             comment.disliked_by.add(user)\n \n-        else:\n-            return JsonResponse({'error': 'Invalid action.'}, status=400)\n-\n-        # Save the updated counts\n         comment.save()\n \n         return JsonResponse({\n             'thumbs_up_count': comment.thumbs_up_count,\n"
                },
                {
                    "date": 1735328935206,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,45 +102,34 @@\n \n # Handle comment thumbs-up and thumbs-down updates\n @csrf_exempt\n def update_thumbs(request):\n-    if request.method == 'POST' and request.headers.get('x-requested-with') == 'XMLHttpRequest':\n+    if request.method == 'POST':\n         comment_id = request.POST.get('comment_id')\n         action = request.POST.get('action')\n \n         try:\n             comment = Comment.objects.get(id=comment_id)\n-        except Comment.DoesNotExist:\n-            return JsonResponse({'error': 'Comment not found.'}, status=404)\n \n-        user = request.user\n+            if action == 'up':\n+                comment.thumbs_up_count += 1\n+            elif action == 'down':\n+                comment.thumbs_down_count += 1\n+            else:\n+                return JsonResponse({'error': 'Invalid action'}, status=400)\n \n-        if action == 'up':\n-            if comment.user_has_liked(user):\n-                return JsonResponse({}, status=200)  # No action if already liked\n-            if comment.user_has_disliked(user):\n-                comment.thumbs_down_count -= 1\n-                comment.disliked_by.remove(user)\n-            comment.thumbs_up_count += 1\n-            comment.liked_by.add(user)\n+            comment.save()\n \n-        elif action == 'down':\n-            if comment.user_has_disliked(user):\n-                return JsonResponse({}, status=200)  # No action if already disliked\n-            if comment.user_has_liked(user):\n-                comment.thumbs_up_count -= 1\n-                comment.liked_by.remove(user)\n-            comment.thumbs_down_count += 1\n-            comment.disliked_by.add(user)\n+            # Return updated counts as JSON\n+            return JsonResponse({\n+                'thumbs_up_count': comment.thumbs_up_count,\n+                'thumbs_down_count': comment.thumbs_down_count,\n+            })\n \n-        comment.save()\n+        except Comment.DoesNotExist:\n+            return JsonResponse({'error': 'Comment not found'}, status=404)\n \n-        return JsonResponse({\n-            'thumbs_up_count': comment.thumbs_up_count,\n-            'thumbs_down_count': comment.thumbs_down_count,\n-        })\n-\n-    return JsonResponse({'error': 'Invalid request.'}, status=400)\n+    return JsonResponse({'error': 'Invalid request method'}, status=405)\n # Blog detail view where comments are added\n def blog_detail(request, pk):\n     blog_post = get_object_or_404(BlogPost, pk=pk)\n     comments = blog_post.comments.all()  # Related comments\n"
                },
                {
                    "date": 1735329361592,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -99,28 +99,40 @@\n \n \n \n \n-# Handle comment thumbs-up and thumbs-down updates\n+\n @csrf_exempt\n def update_thumbs(request):\n     if request.method == 'POST':\n         comment_id = request.POST.get('comment_id')\n         action = request.POST.get('action')\n+        previous_action = request.POST.get('previous_action')\n \n         try:\n+            # Get the comment object\n             comment = Comment.objects.get(id=comment_id)\n \n+            # If the previous action is 'up', decrement the thumbs_up_count\n+            if previous_action == 'up':\n+                comment.thumbs_up_count -= 1\n+\n+            # If the previous action is 'down', decrement the thumbs_down_count\n+            if previous_action == 'down':\n+                comment.thumbs_down_count -= 1\n+\n+            # Now update the new action (thumbs up or thumbs down)\n             if action == 'up':\n                 comment.thumbs_up_count += 1\n             elif action == 'down':\n                 comment.thumbs_down_count += 1\n             else:\n                 return JsonResponse({'error': 'Invalid action'}, status=400)\n \n+            # Save the updated comment\n             comment.save()\n \n-            # Return updated counts as JSON\n+            # Return the updated counts as a JSON response\n             return JsonResponse({\n                 'thumbs_up_count': comment.thumbs_up_count,\n                 'thumbs_down_count': comment.thumbs_down_count,\n             })\n@@ -128,8 +140,9 @@\n         except Comment.DoesNotExist:\n             return JsonResponse({'error': 'Comment not found'}, status=404)\n \n     return JsonResponse({'error': 'Invalid request method'}, status=405)\n+\n # Blog detail view where comments are added\n def blog_detail(request, pk):\n     blog_post = get_object_or_404(BlogPost, pk=pk)\n     comments = blog_post.comments.all()  # Related comments\n"
                },
                {
                    "date": 1735330054241,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -99,40 +99,63 @@\n \n \n \n \n+# Handle comment thumbs-up and thumbs-down updates\n+from django.http import JsonResponse\n+from django.views.decorators.csrf import csrf_exempt\n+from .models import Comment, Vote\n+from django.contrib.auth.decorators import login_required\n \n+# This view is used to update the thumbs-up or thumbs-down vote\n+@login_required\n @csrf_exempt\n-def update_thumbs(request):\n+def update_vote(request):\n     if request.method == 'POST':\n         comment_id = request.POST.get('comment_id')\n         action = request.POST.get('action')\n-        previous_action = request.POST.get('previous_action')\n \n         try:\n             # Get the comment object\n             comment = Comment.objects.get(id=comment_id)\n+            user = request.user\n \n-            # If the previous action is 'up', decrement the thumbs_up_count\n-            if previous_action == 'up':\n-                comment.thumbs_up_count -= 1\n+            # Check if the user has already voted on this comment\n+            try:\n+                vote = Vote.objects.get(comment=comment, user=user)\n+                # If the user has voted, remove the previous vote\n+                if vote.action == action:\n+                    return JsonResponse({'error': 'You already voted for this action'}, status=400)\n+                else:\n+                    # Remove the previous vote count and update the vote\n+                    if vote.action == 'up':\n+                        comment.thumbs_up_count -= 1\n+                    elif vote.action == 'down':\n+                        comment.thumbs_down_count -= 1\n+                    \n+                    # Update the new vote\n+                    if action == 'up':\n+                        comment.thumbs_up_count += 1\n+                    elif action == 'down':\n+                        comment.thumbs_down_count += 1\n \n-            # If the previous action is 'down', decrement the thumbs_down_count\n-            if previous_action == 'down':\n-                comment.thumbs_down_count -= 1\n+                    # Save the updated comment and vote\n+                    vote.action = action\n+                    vote.save()\n+                    comment.save()\n \n-            # Now update the new action (thumbs up or thumbs down)\n-            if action == 'up':\n-                comment.thumbs_up_count += 1\n-            elif action == 'down':\n-                comment.thumbs_down_count += 1\n-            else:\n-                return JsonResponse({'error': 'Invalid action'}, status=400)\n+            except Vote.DoesNotExist:\n+                # If the user hasn't voted yet, add the vote\n+                if action == 'up':\n+                    comment.thumbs_up_count += 1\n+                elif action == 'down':\n+                    comment.thumbs_down_count += 1\n \n-            # Save the updated comment\n-            comment.save()\n+                # Create a new vote record for this user\n+                Vote.objects.create(comment=comment, user=user, action=action)\n+                comment.save()\n \n-            # Return the updated counts as a JSON response\n+            # Return the updated thumbs count as JSON response\n             return JsonResponse({\n                 'thumbs_up_count': comment.thumbs_up_count,\n                 'thumbs_down_count': comment.thumbs_down_count,\n             })\n"
                },
                {
                    "date": 1735330134851,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,72 +100,44 @@\n \n \n \n # Handle comment thumbs-up and thumbs-down updates\n-from django.http import JsonResponse\n-from django.views.decorators.csrf import csrf_exempt\n-from .models import Comment, Vote\n-from django.contrib.auth.decorators import login_required\n-\n-# This view is used to update the thumbs-up or thumbs-down vote\n-@login_required\n @csrf_exempt\n-def update_vote(request):\n-    if request.method == 'POST':\n+def update_thumbs(request):\n+    # Check if the request is a POST request and contains the correct 'X-Requested-With' header\n+    if request.method == 'POST' and request.headers.get('X-Requested-With') == 'XMLHttpRequest':\n+        # Retrieve the POST data\n         comment_id = request.POST.get('comment_id')\n         action = request.POST.get('action')\n \n+        if not comment_id or not action:\n+            return JsonResponse({'error': 'Missing data.'}, status=400)\n+\n+        # Retrieve the comment\n         try:\n-            # Get the comment object\n             comment = Comment.objects.get(id=comment_id)\n-            user = request.user\n+        except Comment.DoesNotExist:\n+            return JsonResponse({'error': 'Comment not found.'}, status=404)\n \n-            # Check if the user has already voted on this comment\n-            try:\n-                vote = Vote.objects.get(comment=comment, user=user)\n-                # If the user has voted, remove the previous vote\n-                if vote.action == action:\n-                    return JsonResponse({'error': 'You already voted for this action'}, status=400)\n-                else:\n-                    # Remove the previous vote count and update the vote\n-                    if vote.action == 'up':\n-                        comment.thumbs_up_count -= 1\n-                    elif vote.action == 'down':\n-                        comment.thumbs_down_count -= 1\n-                    \n-                    # Update the new vote\n-                    if action == 'up':\n-                        comment.thumbs_up_count += 1\n-                    elif action == 'down':\n-                        comment.thumbs_down_count += 1\n+        # Handle thumbs up/down\n+        if action == 'up':\n+            comment.thumbs_up_count += 1\n+        elif action == 'down':\n+            comment.thumbs_down_count += 1\n+        else:\n+            return JsonResponse({'error': 'Invalid action.'}, status=400)\n \n-                    # Save the updated comment and vote\n-                    vote.action = action\n-                    vote.save()\n-                    comment.save()\n+        # Save the updated counts\n+        comment.save()\n \n-            except Vote.DoesNotExist:\n-                # If the user hasn't voted yet, add the vote\n-                if action == 'up':\n-                    comment.thumbs_up_count += 1\n-                elif action == 'down':\n-                    comment.thumbs_down_count += 1\n+        # Return updated counts in the response\n+        return JsonResponse({\n+            'thumbs_up_count': comment.thumbs_up_count,\n+            'thumbs_down_count': comment.thumbs_down_count,\n+        })\n \n-                # Create a new vote record for this user\n-                Vote.objects.create(comment=comment, user=user, action=action)\n-                comment.save()\n+    return JsonResponse({'error': 'Invalid request.'}, status=400)\n \n-            # Return the updated thumbs count as JSON response\n-            return JsonResponse({\n-                'thumbs_up_count': comment.thumbs_up_count,\n-                'thumbs_down_count': comment.thumbs_down_count,\n-            })\n-\n-        except Comment.DoesNotExist:\n-            return JsonResponse({'error': 'Comment not found'}, status=404)\n-\n-    return JsonResponse({'error': 'Invalid request method'}, status=405)\n-\n # Blog detail view where comments are added\n def blog_detail(request, pk):\n     blog_post = get_object_or_404(BlogPost, pk=pk)\n     comments = blog_post.comments.all()  # Related comments\n"
                },
                {
                    "date": 1735330222110,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,42 +102,44 @@\n \n # Handle comment thumbs-up and thumbs-down updates\n @csrf_exempt\n def update_thumbs(request):\n-    # Check if the request is a POST request and contains the correct 'X-Requested-With' header\n-    if request.method == 'POST' and request.headers.get('X-Requested-With') == 'XMLHttpRequest':\n-        # Retrieve the POST data\n+    if request.method == 'POST':\n         comment_id = request.POST.get('comment_id')\n         action = request.POST.get('action')\n+        previous_action = request.POST.get('previous_action')\n \n-        if not comment_id or not action:\n-            return JsonResponse({'error': 'Missing data.'}, status=400)\n-\n-        # Retrieve the comment\n         try:\n+            # Get the comment object\n             comment = Comment.objects.get(id=comment_id)\n-        except Comment.DoesNotExist:\n-            return JsonResponse({'error': 'Comment not found.'}, status=404)\n \n-        # Handle thumbs up/down\n-        if action == 'up':\n-            comment.thumbs_up_count += 1\n-        elif action == 'down':\n-            comment.thumbs_down_count += 1\n-        else:\n-            return JsonResponse({'error': 'Invalid action.'}, status=400)\n+            # If there was a previous vote, decrement that count\n+            if previous_action == 'up':\n+                comment.thumbs_up_count -= 1\n+            elif previous_action == 'down':\n+                comment.thumbs_down_count -= 1\n \n-        # Save the updated counts\n-        comment.save()\n+            # Update the new vote count\n+            if action == 'up':\n+                comment.thumbs_up_count += 1\n+            elif action == 'down':\n+                comment.thumbs_down_count += 1\n+            else:\n+                return JsonResponse({'error': 'Invalid action'}, status=400)\n \n-        # Return updated counts in the response\n-        return JsonResponse({\n-            'thumbs_up_count': comment.thumbs_up_count,\n-            'thumbs_down_count': comment.thumbs_down_count,\n-        })\n+            # Save the updated comment\n+            comment.save()\n \n-    return JsonResponse({'error': 'Invalid request.'}, status=400)\n+            # Return the updated counts as a JSON response\n+            return JsonResponse({\n+                'thumbs_up_count': comment.thumbs_up_count,\n+                'thumbs_down_count': comment.thumbs_down_count,\n+            })\n \n+        except Comment.DoesNotExist:\n+            return JsonResponse({'error': 'Comment not found'}, status=404)\n+\n+    return JsonResponse({'error': 'Invalid request method'}, status=405)\n # Blog detail view where comments are added\n def blog_detail(request, pk):\n     blog_post = get_object_or_404(BlogPost, pk=pk)\n     comments = blog_post.comments.all()  # Related comments\n"
                },
                {
                    "date": 1735333275642,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,8 +13,13 @@\n from .forms import LoginForm, CommentForm\n from django.contrib.auth.models import User\n from django.contrib import messages\n from django.views.decorators.csrf import csrf_exempt\n+from django.http import JsonResponse\n+from django.views.decorators.csrf import csrf_exempt\n+from .models import Comment, UserCommentVote\n+from django.contrib.auth.decorators import login_required\n+\n # views.py\n \n # Create your views here.\n def index(request):\n@@ -101,8 +106,9 @@\n \n \n # Handle comment thumbs-up and thumbs-down updates\n @csrf_exempt\n+@login_required\n def update_thumbs(request):\n     if request.method == 'POST':\n         comment_id = request.POST.get('comment_id')\n         action = request.POST.get('action')\n@@ -111,19 +117,29 @@\n         try:\n             # Get the comment object\n             comment = Comment.objects.get(id=comment_id)\n \n-            # If there was a previous vote, decrement that count\n-            if previous_action == 'up':\n-                comment.thumbs_up_count -= 1\n-            elif previous_action == 'down':\n-                comment.thumbs_down_count -= 1\n+            # Check if the user has already voted on this comment\n+            user_vote = UserCommentVote.objects.filter(user=request.user, comment=comment).first()\n \n-            # Update the new vote count\n+            # If the user has already voted, remove their previous vote\n+            if user_vote:\n+                if user_vote.vote == 'up':\n+                    comment.thumbs_up_count -= 1\n+                elif user_vote.vote == 'down':\n+                    comment.thumbs_down_count -= 1\n+                # Remove the previous vote record\n+                user_vote.delete()\n+\n+            # Handle the new vote action\n             if action == 'up':\n                 comment.thumbs_up_count += 1\n+                # Record the new vote\n+                UserCommentVote.objects.create(user=request.user, comment=comment, vote='up')\n             elif action == 'down':\n                 comment.thumbs_down_count += 1\n+                # Record the new vote\n+                UserCommentVote.objects.create(user=request.user, comment=comment, vote='down')\n             else:\n                 return JsonResponse({'error': 'Invalid action'}, status=400)\n \n             # Save the updated comment\n@@ -138,8 +154,10 @@\n         except Comment.DoesNotExist:\n             return JsonResponse({'error': 'Comment not found'}, status=404)\n \n     return JsonResponse({'error': 'Invalid request method'}, status=405)\n+\n+\n # Blog detail view where comments are added\n def blog_detail(request, pk):\n     blog_post = get_object_or_404(BlogPost, pk=pk)\n     comments = blog_post.comments.all()  # Related comments\n"
                },
                {
                    "date": 1735337491265,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,11 +101,8 @@\n \n \n \n \n-\n-\n-\n # Handle comment thumbs-up and thumbs-down updates\n @csrf_exempt\n @login_required\n def update_thumbs(request):\n@@ -155,9 +152,8 @@\n             return JsonResponse({'error': 'Comment not found'}, status=404)\n \n     return JsonResponse({'error': 'Invalid request method'}, status=405)\n \n-\n # Blog detail view where comments are added\n def blog_detail(request, pk):\n     blog_post = get_object_or_404(BlogPost, pk=pk)\n     comments = blog_post.comments.all()  # Related comments\n@@ -174,10 +170,11 @@\n                 )\n \n                 profile_picture_url = request.user.profile_picture.url if request.user.profile_picture else None\n \n+                # Return the created comment's details as a JSON response\n                 return JsonResponse({\n-                    'id': comment.id,\n+                    'comment_id': comment.id,\n                     'author': comment.author.username,\n                     'content': comment.content,\n                     'created_at': comment.created_at.strftime('%B %d, %Y at %I:%M %p'),\n                     'profile_picture_url': profile_picture_url,\n@@ -199,5 +196,5 @@\n         'blog_post': blog_post,\n         'comments': comments,\n         'images': images,\n         'form': form,\n-    })\n+    })\n\\ No newline at end of file\n"
                },
                {
                    "date": 1735338205399,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -162,17 +162,18 @@\n     if request.method == 'POST' and request.headers.get('x-requested-with') == 'XMLHttpRequest':\n         if request.user.is_authenticated:\n             content = request.POST.get('content', '').strip()\n             if content:\n+                # Create a new comment\n                 comment = Comment.objects.create(\n                     blog_post=blog_post,\n                     author=request.user,\n                     content=content\n                 )\n \n                 profile_picture_url = request.user.profile_picture.url if request.user.profile_picture else None\n \n-                # Return the created comment's details as a JSON response\n+                # Return the created comment's details and thumbs counts as a JSON response\n                 return JsonResponse({\n                     'comment_id': comment.id,\n                     'author': comment.author.username,\n                     'content': comment.content,\n"
                },
                {
                    "date": 1735456649173,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n     return render(request, 'IDGenie/index.html', {'blog_posts': blog_posts})\n \n \n def blogpost(request):\n-    blog_posts = BlogPost.objects.all()\n+    blog_posts = BlogPost.objects.order_by('-created_at')[:5]  # Fetch the latest 5 posts\n     return render(request, 'IDGenie/blogpost.html', {'blog_posts': blog_posts})\n \n \n \n"
                },
                {
                    "date": 1735456935249,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n     return render(request, 'IDGenie/index.html', {'blog_posts': blog_posts})\n \n \n def blogpost(request):\n-    blog_posts = BlogPost.objects.order_by('-created_at')[:5]  # Fetch the latest 5 posts\n+    blog_posts = BlogPost.objects.all()\n     return render(request, 'IDGenie/blogpost.html', {'blog_posts': blog_posts})\n \n \n \n"
                },
                {
                    "date": 1735458001612,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,18 +28,22 @@\n     return render(request, 'IDGenie/index.html', {'blog_posts': blog_posts})\n \n \n def blogpost(request):\n-    blog_posts = BlogPost.objects.all()\n-    return render(request, 'IDGenie/blogpost.html', {'blog_posts': blog_posts})\n+    blog_posts = Blog.objects.all().order_by('-created_at')  # Order by newest first\n+    paginator = Paginator(blog_posts, 3)  # Show 3 posts per page\n+    page_number = request.GET.get('page')  # Get the page number from the request\n+    page_obj = paginator.get_page(page_number)  # Get the page object\n \n+    return render(request, 'IDGenie/blog_list.html', {'page_obj': page_obj})\n \n \n \n \n \n \n \n+\n # Login code\n \n def login_view(request):\n     if request.method == 'POST':\n"
                },
                {
                    "date": 1735458025506,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,8 +17,9 @@\n from django.http import JsonResponse\n from django.views.decorators.csrf import csrf_exempt\n from .models import Comment, UserCommentVote\n from django.contrib.auth.decorators import login_required\n+from django.core.paginator import Paginator\n \n # views.py\n \n # Create your views here.\n"
                },
                {
                    "date": 1735458269376,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,22 +29,20 @@\n     return render(request, 'IDGenie/index.html', {'blog_posts': blog_posts})\n \n \n def blogpost(request):\n-    blog_posts = Blog.objects.all().order_by('-created_at')  # Order by newest first\n+    blog_posts = BlogPost.objects.all().order_by('-created_at')  # Order by newest first\n     paginator = Paginator(blog_posts, 3)  # Show 3 posts per page\n-    page_number = request.GET.get('page')  # Get the page number from the request\n-    page_obj = paginator.get_page(page_number)  # Get the page object\n+    page_number = request.GET.get('page')  # Get the current page number from the request\n+    page_obj = paginator.get_page(page_number)  # Get the blog posts for the current page\n \n-    return render(request, 'IDGenie/blog_list.html', {'page_obj': page_obj})\n+    return render(request, 'IDGenie/blogpost.html', {'page_obj': page_obj})\n \n \n \n \n \n \n-\n-\n # Login code\n \n def login_view(request):\n     if request.method == 'POST':\n"
                },
                {
                    "date": 1735459534920,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n \n \n def blogpost(request):\n     blog_posts = BlogPost.objects.all().order_by('-created_at')  # Order by newest first\n-    paginator = Paginator(blog_posts, 3)  # Show 3 posts per page\n+    paginator = Paginator(blog_posts, 1)  # Show 3 posts per page\n     page_number = request.GET.get('page')  # Get the current page number from the request\n     page_obj = paginator.get_page(page_number)  # Get the blog posts for the current page\n \n     return render(request, 'IDGenie/blogpost.html', {'page_obj': page_obj})\n"
                },
                {
                    "date": 1735459576446,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n \n \n def blogpost(request):\n     blog_posts = BlogPost.objects.all().order_by('-created_at')  # Order by newest first\n-    paginator = Paginator(blog_posts, 1)  # Show 3 posts per page\n+    paginator = Paginator(blog_posts, 3)  # Show 3 posts per page\n     page_number = request.GET.get('page')  # Get the current page number from the request\n     page_obj = paginator.get_page(page_number)  # Get the blog posts for the current page\n \n     return render(request, 'IDGenie/blogpost.html', {'page_obj': page_obj})\n"
                },
                {
                    "date": 1735460145054,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n \n \n def blogpost(request):\n     blog_posts = BlogPost.objects.all().order_by('-created_at')  # Order by newest first\n-    paginator = Paginator(blog_posts, 3)  # Show 3 posts per page\n+    paginator = Paginator(blog_posts, 5)  # Show 3 posts per page\n     page_number = request.GET.get('page')  # Get the current page number from the request\n     page_obj = paginator.get_page(page_number)  # Get the blog posts for the current page\n \n     return render(request, 'IDGenie/blogpost.html', {'page_obj': page_obj})\n"
                },
                {
                    "date": 1735460177862,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n \n \n def blogpost(request):\n     blog_posts = BlogPost.objects.all().order_by('-created_at')  # Order by newest first\n-    paginator = Paginator(blog_posts, 5)  # Show 3 posts per page\n+    paginator = Paginator(blog_posts, 1)  # Show 3 posts per page\n     page_number = request.GET.get('page')  # Get the current page number from the request\n     page_obj = paginator.get_page(page_number)  # Get the blog posts for the current page\n \n     return render(request, 'IDGenie/blogpost.html', {'page_obj': page_obj})\n"
                },
                {
                    "date": 1735460245570,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n \n \n def blogpost(request):\n     blog_posts = BlogPost.objects.all().order_by('-created_at')  # Order by newest first\n-    paginator = Paginator(blog_posts, 1)  # Show 3 posts per page\n+    paginator = Paginator(blog_posts, 3)  # Show 3 posts per page\n     page_number = request.GET.get('page')  # Get the current page number from the request\n     page_obj = paginator.get_page(page_number)  # Get the blog posts for the current page\n \n     return render(request, 'IDGenie/blogpost.html', {'page_obj': page_obj})\n"
                },
                {
                    "date": 1735460263537,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n \n \n def blogpost(request):\n     blog_posts = BlogPost.objects.all().order_by('-created_at')  # Order by newest first\n-    paginator = Paginator(blog_posts, 3)  # Show 3 posts per page\n+    paginator = Paginator(blog_posts, 2)  # Show 3 posts per page\n     page_number = request.GET.get('page')  # Get the current page number from the request\n     page_obj = paginator.get_page(page_number)  # Get the blog posts for the current page\n \n     return render(request, 'IDGenie/blogpost.html', {'page_obj': page_obj})\n"
                }
            ],
            "date": 1732961842027,
            "name": "Commit-0",
            "content": "from django.shortcuts import render\nfrom django.http import HttpResponse\nfrom django.http import  JsonResponse\nfrom django.contrib import messages\nfrom django.urls import reverse\nfrom django.conf import settings\n\n\n\n# Create your views here.\ndef index(request):\n\n    return render(request, 'IDGenie/index.html')\n\n\ndef blogpost(request):\n    return render(request, 'IDGenie/blogpost.html')"
        }
    ]
}