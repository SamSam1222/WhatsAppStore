{
    "sourceFile": "VerifyPro/IDGenie/admin.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 25,
            "patches": [
                {
                    "date": 1734304065147,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1734470958586,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,49 +1,39 @@\n from django.contrib import admin\n-from  .models import BlogPost, Comment\n-# Register your models here.\n+from .models import BlogPost, Comment\n+from .forms import BlogPostAdminForm\n \n-# BlogPost Admin Form\n-class BlogPostAdminForm(forms.ModelForm):\n-    class Meta:\n-        model = BlogPost\n-        field = ['title', 'content', 'quote', 'image', 'video_url', 'author']\n-        \n-    # Additional fields for adding paragraphs dynamically\n-    content_extra = forms.CharField(widget=forms.Textarea, required=False, label=\"Addition Paragraph\")\n-    image_extra = forms.ImageField(required=False, lable=\"Additional Image\")\n-    video_url_extra = forms.URLField(required=False, label=\"Additional Video URL\")\n-    quote_extra = forms.CharField(widget=forms.Textarea, required=False, label=\"Quote\", help_text=\"This is optional.\")\n+\n+# BlogPost Admin\n+class BlogPostAdmin(admin.ModelAdmin):\n+    form = BlogPostAdminForm   # Use the custom form\n     \n+    # Admin list view settings\n+    list_display = ('title', 'author', 'created_at', 'updated_at',)\n+    search_fields = ('title', 'content', 'author_username')         # Searchable fields\n+    list_filter = ('created_at', 'author')       # Filters on the right side\n     \n-    # Override save method to include additional paragraphs, images, etc.\n-    def save(self, commit=True):\n-        blog_post = super().save(commit=False)\n-        \n-        \n-        # Handle the additional content and media fields here\n-        if commit:\n-            blog_post.save()\n-            \n-        # Optionally, handle additional paragraphs, images, and videos here\n-        \n-        return blog_post\n     \n-# BlogPostAdmin(admin.ModelAdmin):\n-class BlogPostAdmin(admin.ModelAdmin):\n-    form = BlogPostAdminForm\n-    list_display = ('title', 'author', 'created_at', 'updated_at')\n-    search_fields = ('title', 'content')\n-    list_filter = ('created_at')\n-    \n+    # Organize fields in sections\n     fieldsets = (\n\\ No newline at end of file\n-        ('Main Info', {\n-            'fields': ('title', 'content', 'quote', 'image', 'video_url', 'author')  \n+        ('Main Information', {\n+            'fields': ('title', 'content', 'quote', 'image', 'video_url', 'author'),\n         }),\n         ('Additional Options', {\n             'fields': ('content_extra', 'image_extra', 'video_url_extra', 'quote_extra'),\n-            'classes': ('collapse',)\n+            'classes': ('collapse',), # Makes this section collapsible\n         }),\n     )\n     \n+    # Add more customization if needed (e.g., readonly fields, prepopulated fields)\n+\n+# Registered BlogPost with custom admin\n admin.site.register(BlogPost, BlogPostAdmin)\n-admin.site.register(Comment)\n+\n+\n+# Comment Admin (Simple)\n+class CommentAdmin(admin.ModelAdmin):\n+    list_display = ('name', 'blog_post', 'created_at', 'approved')\n+    list_filter = ('approved', 'created_at')\n+    search_fields = ('name', 'content')\n+    \n+admin.site.register(Comment, CommentAdmin)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1734597402699,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,39 +1,28 @@\n from django.contrib import admin\n from .models import BlogPost, Comment\n from .forms import BlogPostAdminForm\n \n-\n # BlogPost Admin\n class BlogPostAdmin(admin.ModelAdmin):\n-    form = BlogPostAdminForm   # Use the custom form\n-    \n-    # Admin list view settings\n-    list_display = ('title', 'author', 'created_at', 'updated_at',)\n-    search_fields = ('title', 'content', 'author_username')         # Searchable fields\n-    list_filter = ('created_at', 'author')       # Filters on the right side\n-    \n-    \n-    # Organize fields in sections\n+    form = BlogPostAdminForm\n+    list_display = ('title', 'author', 'created_at', 'updated_at')\n+    search_fields = ('title', 'content')\n+    list_filter = ('created_at', 'updated_at')\n+\n     fieldsets = (\n-        ('Main Information', {\n-            'fields': ('title', 'content', 'quote', 'image', 'video_url', 'author'),\n+        ('Main Info', {\n+            'fields': ('title', 'content', 'quote', 'image', 'video_url', 'author')\n         }),\n         ('Additional Options', {\n-            'fields': ('content_extra', 'image_extra', 'video_url_extra', 'quote_extra'),\n-            'classes': ('collapse',), # Makes this section collapsible\n+            'fields': ('content_extra', 'image_extra', 'image_extra2', 'video_url_extra', 'quote_extra', 'quote_extra2'),\n+            'classes': ('collapse',)\n         }),\n     )\n-    \n-    # Add more customization if needed (e.g., readonly fields, prepopulated fields)\n \n-# Registered BlogPost with custom admin\n+class CommentAdmin(admin.ModelAdmin):\n\\ No newline at end of file\n+    list_display = ('author', 'blog_post', 'created_at', 'content')\n+    search_fields = ('author__username', 'blog__post__title', 'content')\n+    list_filter = ('created_at',)\n+\n admin.site.register(BlogPost, BlogPostAdmin)\n-\n-\n-# Comment Admin (Simple)\n-class CommentAdmin(admin.ModelAdmin):\n-    list_display = ('name', 'blog_post', 'created_at', 'approved')\n-    list_filter = ('approved', 'created_at')\n-    search_fields = ('name', 'content')\n-    \n-admin.site.register(Comment, CommentAdmin)\n+admin.site.register(Comment, CommentAdmin)\n"
                },
                {
                    "date": 1734632635763,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,28 +1,52 @@\n from django.contrib import admin\n-from .models import BlogPost, Comment\n+from .models import BlogPost, BlogPostImage, Comment\n from .forms import BlogPostAdminForm\n \n+\n+# Inline for managing additional images\n+class BlogPostImageInline(admin.TabularInline):\n+    model = BlogPostImage\n+    extra = 1  # Show 1 empty form for adding images by default\n+\n+\n+# Inline for managing comments\n+class CommentInline(admin.TabularInline):\n+    model = Comment\n+    extra = 1  # Show 1 empty form for adding comments by default\n+\n+\n # BlogPost Admin\n class BlogPostAdmin(admin.ModelAdmin):\n     form = BlogPostAdminForm\n     list_display = ('title', 'author', 'created_at', 'updated_at')\n-    search_fields = ('title', 'content')\n-    list_filter = ('created_at', 'updated_at')\n+    search_fields = ('title', 'content', 'author__username')\n+    list_filter = ('created_at', 'updated_at', 'author')\n+    prepopulated_fields = {'slug': ('title',)}  # Automatically generate slug from the title\n \n\\ No newline at end of file\n+    # Use inlines for managing additional images and comments\n+    inlines = [BlogPostImageInline, CommentInline]\n+\n+    # Organize fields into sections\n     fieldsets = (\n         ('Main Info', {\n-            'fields': ('title', 'content', 'quote', 'image', 'video_url', 'author')\n+            'fields': ('title', 'slug', 'content', 'image', 'video_url', 'author')\n         }),\n-        ('Additional Options', {\n-            'fields': ('content_extra', 'image_extra', 'image_extra2', 'video_url_extra', 'quote_extra', 'quote_extra2'),\n-            'classes': ('collapse',)\n+        ('Dates', {\n+            'fields': ('created_at', 'updated_at'),\n+            'classes': ('collapse',),  # Make this section collapsible\n         }),\n     )\n+    readonly_fields = ('created_at', 'updated_at')  # Prevent editing dates\n \n+\n+# Comment Admin\n class CommentAdmin(admin.ModelAdmin):\n-    list_display = ('author', 'blog_post', 'created_at', 'content')\n-    search_fields = ('author__username', 'blog__post__title', 'content')\n-    list_filter = ('created_at',)\n+    list_display = ('blog_post', 'author', 'created_at', 'updated_at')\n+    search_fields = ('blog_post__title', 'author__username', 'content')\n+    list_filter = ('created_at', 'updated_at', 'author')\n+    readonly_fields = ('created_at', 'updated_at')  # Prevent editing dates\n \n+\n+# Register models in the admin site\n admin.site.register(BlogPost, BlogPostAdmin)\n-admin.site.register(Comment, CommentAdmin)\n+admin.site.register(Comment, CommentAdmin)\n"
                },
                {
                    "date": 1734643221250,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,9 @@\n from django.contrib import admin\n from .models import BlogPost, BlogPostImage, Comment\n from .forms import BlogPostAdminForm\n+from ckeditor.widgets import CKEditorWidget\n+from django import forms\n \n \n # Inline for managing additional images\n class BlogPostImageInline(admin.TabularInline):\n@@ -37,9 +39,19 @@\n         }),\n     )\n     readonly_fields = ('created_at', 'updated_at')  # Prevent editing dates\n \n+    # Define custom media for JavaScript and CSS\n+    class Media:\n+        js = (\n+            'ckeditor/ckeditor.js',  # Load CKEditor script\n+            'ckeditor/ckeditor_custom.js',  # Your custom JavaScript\n+        )\n+        css = {\n+            'all': ('ckeditor/ckeditor_custom.css',)  # Your custom CSS\n+        }\n \n+\n # Comment Admin\n class CommentAdmin(admin.ModelAdmin):\n     list_display = ('blog_post', 'author', 'created_at', 'updated_at')\n     search_fields = ('blog_post__title', 'author__username', 'content')\n@@ -48,5 +60,5 @@\n \n \n # Register models in the admin site\n admin.site.register(BlogPost, BlogPostAdmin)\n-admin.site.register(Comment, CommentAdmin)\n\\ No newline at end of file\n+admin.site.register(Comment, CommentAdmin)\n"
                },
                {
                    "date": 1734643329337,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,10 +42,10 @@\n \n     # Define custom media for JavaScript and CSS\n     class Media:\n         js = (\n-            'ckeditor/ckeditor.js',  # Load CKEditor script\n-            'ckeditor/ckeditor_custom.js',  # Your custom JavaScript\n+            'static/ckeditor.js',  # Load CKEditor script\n+            'static/ckeditor_custom.js',  # Your custom JavaScript\n         )\n         css = {\n             'all': ('ckeditor/ckeditor_custom.css',)  # Your custom CSS\n         }\n"
                },
                {
                    "date": 1734643537509,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n             'static/ckeditor.js',  # Load CKEditor script\n             'static/ckeditor_custom.js',  # Your custom JavaScript\n         )\n         css = {\n-            'all': ('ckeditor/ckeditor_custom.css',)  # Your custom CSS\n+            'all': ('static/ckeditor_custom.css',)  # Your custom CSS\n         }\n \n \n # Comment Admin\n"
                },
                {
                    "date": 1734643729194,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,7 @@\n from django.contrib import admin\n from .models import BlogPost, BlogPostImage, Comment\n from .forms import BlogPostAdminForm\n-from ckeditor.widgets import CKEditorWidget\n-from django import forms\n \n \n # Inline for managing additional images\n class BlogPostImageInline(admin.TabularInline):\n@@ -39,19 +37,9 @@\n         }),\n     )\n     readonly_fields = ('created_at', 'updated_at')  # Prevent editing dates\n \n-    # Define custom media for JavaScript and CSS\n-    class Media:\n-        js = (\n-            'static/ckeditor.js',  # Load CKEditor script\n-            'static/ckeditor_custom.js',  # Your custom JavaScript\n-        )\n-        css = {\n-            'all': ('static/ckeditor_custom.css',)  # Your custom CSS\n-        }\n \n-\n # Comment Admin\n class CommentAdmin(admin.ModelAdmin):\n     list_display = ('blog_post', 'author', 'created_at', 'updated_at')\n     search_fields = ('blog_post__title', 'author__username', 'content')\n"
                },
                {
                    "date": 1734814474159,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,7 +46,15 @@\n     list_filter = ('created_at', 'updated_at', 'author')\n     readonly_fields = ('created_at', 'updated_at')  # Prevent editing dates\n \n \n+\n+class MyAdminSite(AdminSite):\n+    site_title = \"Your Admin Title\"\n+    site_header = \"Your Brand\"\n+    site_url = \"/\"\n+\n+\n # Register models in the admin site\n admin.site.register(BlogPost, BlogPostAdmin)\n admin.site.register(Comment, CommentAdmin)\n+admin_site =MyAdminSite()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1734814498296,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n from django.contrib import admin\n from .models import BlogPost, BlogPostImage, Comment\n from .forms import BlogPostAdminForm\n+from django.contrib.admin import AdminSite\n \n-\n # Inline for managing additional images\n class BlogPostImageInline(admin.TabularInline):\n     model = BlogPostImage\n     extra = 1  # Show 1 empty form for adding images by default\n"
                },
                {
                    "date": 1734814850729,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n from django.contrib import admin\n from .models import BlogPost, BlogPostImage, Comment\n from .forms import BlogPostAdminForm\n-from django.contrib.admin import AdminSite\n \n+\n # Inline for managing additional images\n class BlogPostImageInline(admin.TabularInline):\n     model = BlogPostImage\n     extra = 1  # Show 1 empty form for adding images by default\n@@ -46,15 +46,7 @@\n     list_filter = ('created_at', 'updated_at', 'author')\n     readonly_fields = ('created_at', 'updated_at')  # Prevent editing dates\n \n \n-\n-class MyAdminSite(AdminSite):\n-    site_title = \"Your Admin Title\"\n-    site_header = \"Your Brand\"\n-    site_url = \"/\"\n-\n-\n # Register models in the admin site\n admin.site.register(BlogPost, BlogPostAdmin)\n admin.site.register(Comment, CommentAdmin)\n-admin_site =MyAdminSite()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1734816481504,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n from django.contrib import admin\n-from .models import BlogPost, BlogPostImage, Comment\n+from .models import BlogPost, BlogPostImage, Comment, Profile\n from .forms import BlogPostAdminForm\n \n \n # Inline for managing additional images\n"
                },
                {
                    "date": 1734816497919,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,4 +49,5 @@\n \n # Register models in the admin site\n admin.site.register(BlogPost, BlogPostAdmin)\n admin.site.register(Comment, CommentAdmin)\n+admin.site.register(Profile)\n"
                },
                {
                    "date": 1734880145652,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,11 @@\n     search_fields = ('blog_post__title', 'author__username', 'content')\n     list_filter = ('created_at', 'updated_at', 'author')\n     readonly_fields = ('created_at', 'updated_at')  # Prevent editing dates\n \n-\n+class ProfileAdmin(admin.ModelAdmin):\n+    list_display = ['user', 'avatar']\n+    \n # Register models in the admin site\n admin.site.register(BlogPost, BlogPostAdmin)\n admin.site.register(Comment, CommentAdmin)\n-admin.site.register(Profile)\n+admin.site.register(Profile, ProfileAdmin)\n"
                },
                {
                    "date": 1734881718489,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,10 +45,17 @@\n     search_fields = ('blog_post__title', 'author__username', 'content')\n     list_filter = ('created_at', 'updated_at', 'author')\n     readonly_fields = ('created_at', 'updated_at')  # Prevent editing dates\n \n+@admin.register(Profile)\n class ProfileAdmin(admin.ModelAdmin):\n-    list_display = ['user', 'avatar']\n+    list_display = ['user', 'avatar_display']  # Add avatar_display to list_display\n+\n+    def avatar_display(self, obj):\n+        if obj.avatar:\n+            return format_html('<img src=\"{}\" width=\"50\" height=\"50\" style=\"border-radius: 50%;\" />', obj.avatar.url)\n+        return \"No Avatar\"\n+    avatar_display.short_description = 'Avatar'  # Set the column name in the admin interface\n     \n # Register models in the admin site\n admin.site.register(BlogPost, BlogPostAdmin)\n admin.site.register(Comment, CommentAdmin)\n"
                },
                {
                    "date": 1734881728587,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n from django.contrib import admin\n from .models import BlogPost, BlogPostImage, Comment, Profile\n from .forms import BlogPostAdminForm\n+from django.utils.html import format_html\n \n \n # Inline for managing additional images\n class BlogPostImageInline(admin.TabularInline):\n"
                },
                {
                    "date": 1734881873263,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,7 +57,11 @@\n         return \"No Avatar\"\n     avatar_display.short_description = 'Avatar'  # Set the column name in the admin interface\n     \n # Register models in the admin site\n+\n+\n admin.site.register(BlogPost, BlogPostAdmin)\n admin.site.register(Comment, CommentAdmin)\n-admin.site.register(Profile, ProfileAdmin)\n+\n+admin.site.unregister(Profile)  # Unregister if already registered\n+admin.site.register(Profile, ProfileAdmin)  # Re-register with the updated class\n"
                },
                {
                    "date": 1734907113284,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,10 @@\n from django.contrib import admin\n-from .models import BlogPost, BlogPostImage, Comment, Profile\n+from .models import BlogPost, BlogPostImage, Comment, Profile, CustomUser\n from .forms import BlogPostAdminForm\n from django.utils.html import format_html\n+from django.contrib.auth.admin import UserAdmin\n \n-\n # Inline for managing additional images\n class BlogPostImageInline(admin.TabularInline):\n     model = BlogPostImage\n     extra = 1  # Show 1 empty form for adding images by default\n@@ -59,8 +59,21 @@\n     \n # Register models in the admin site\n \n \n+\n+\n+class CustomUserAdmin(UserAdmin):\n+    model = CustomUser\n+    list_display = ['username', 'email', 'phone_number', 'profile_picture', 'is_staff', 'is_active']\n+    fieldsets = UserAdmin.fieldsets + (\n+        (None, {'fields': ('phone_number', 'profile_picture')}),\n+    )\n+    add_fieldsets = UserAdmin.add_fieldsets + (\n+        (None, {'fields': ('phone_number', 'profile_picture')}),\n+    )\n+\n+admin.site.register(CustomUser, CustomUserAdmin)\n admin.site.register(BlogPost, BlogPostAdmin)\n admin.site.register(Comment, CommentAdmin)\n \n admin.site.unregister(Profile)  # Unregister if already registered\n"
                },
                {
                    "date": 1734907118771,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,7 +74,6 @@\n \n admin.site.register(CustomUser, CustomUserAdmin)\n admin.site.register(BlogPost, BlogPostAdmin)\n admin.site.register(Comment, CommentAdmin)\n-\n admin.site.unregister(Profile)  # Unregister if already registered\n admin.site.register(Profile, ProfileAdmin)  # Re-register with the updated class\n"
                },
                {
                    "date": 1734983614272,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,17 @@\n from .models import BlogPost, BlogPostImage, Comment, Profile, CustomUser\n from .forms import BlogPostAdminForm\n from django.utils.html import format_html\n from django.contrib.auth.admin import UserAdmin\n+# admin.py\n+from django.contrib import admin\n+from django.contrib.auth.admin import UserAdmin\n+from .models import CustomUser\n+from .forms import CustomUserCreationForm\n \n+\n+\n+\n # Inline for managing additional images\n class BlogPostImageInline(admin.TabularInline):\n     model = BlogPostImage\n     extra = 1  # Show 1 empty form for adding images by default\n@@ -62,17 +70,33 @@\n \n \n \n class CustomUserAdmin(UserAdmin):\n-    model = CustomUser\n-    list_display = ['username', 'email', 'phone_number', 'profile_picture', 'is_staff', 'is_active']\n-    fieldsets = UserAdmin.fieldsets + (\n-        (None, {'fields': ('phone_number', 'profile_picture')}),\n+    # Form to use for creating new users\n+    add_form = CustomUserCreationForm\n+    \n+    # Fields to be displayed in the admin list view\n+    list_display = ('username', 'email', 'first_name', 'last_name', 'phone_number', 'gender', 'is_staff')\n+    \n+    # Fields to be included in the add and change forms in the admin\n+    fieldsets = (\n+        (None, {'fields': ('username', 'password')}),\n+        ('Personal info', {'fields': ('first_name', 'last_name', 'email', 'phone_number', 'gender', 'profile_picture')}),\n+        ('Permissions', {'fields': ('is_active', 'is_staff', 'is_superuser', 'groups', 'user_permissions')}),\n+        ('Important dates', {'fields': ('last_login', 'date_joined')}),\n     )\n-    add_fieldsets = UserAdmin.add_fieldsets + (\n-        (None, {'fields': ('phone_number', 'profile_picture')}),\n+    \n+    # Fields to display in the admin form when creating a new user\n+    add_fieldsets = (\n+        (None, {'fields': ('username', 'password1', 'password2')}),\n+        ('Personal info', {'fields': ('first_name', 'last_name', 'email', 'phone_number', 'gender', 'profile_picture')}),\n+        ('Permissions', {'fields': ('is_active', 'is_staff')}),\n     )\n+    \n+    search_fields = ('username', 'email')\n+    ordering = ('username',)\n \n+# Register CustomUser model with the CustomUserAdmin\n admin.site.register(CustomUser, CustomUserAdmin)\n admin.site.register(BlogPost, BlogPostAdmin)\n admin.site.register(Comment, CommentAdmin)\n admin.site.unregister(Profile)  # Unregister if already registered\n"
                },
                {
                    "date": 1734985586139,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,17 +2,10 @@\n from .models import BlogPost, BlogPostImage, Comment, Profile, CustomUser\n from .forms import BlogPostAdminForm\n from django.utils.html import format_html\n from django.contrib.auth.admin import UserAdmin\n-# admin.py\n-from django.contrib import admin\n-from django.contrib.auth.admin import UserAdmin\n from .models import CustomUser\n-from .forms import CustomUserCreationForm\n \n-\n-\n-\n # Inline for managing additional images\n class BlogPostImageInline(admin.TabularInline):\n     model = BlogPostImage\n     extra = 1  # Show 1 empty form for adding images by default\n@@ -69,34 +62,24 @@\n \n \n \n \n+# admin.py\n+\n class CustomUserAdmin(UserAdmin):\n-    # Form to use for creating new users\n-    add_form = CustomUserCreationForm\n-    \n-    # Fields to be displayed in the admin list view\n-    list_display = ('username', 'email', 'first_name', 'last_name', 'phone_number', 'gender', 'is_staff')\n-    \n-    # Fields to be included in the add and change forms in the admin\n-    fieldsets = (\n-        (None, {'fields': ('username', 'password')}),\n-        ('Personal info', {'fields': ('first_name', 'last_name', 'email', 'phone_number', 'gender', 'profile_picture')}),\n-        ('Permissions', {'fields': ('is_active', 'is_staff', 'is_superuser', 'groups', 'user_permissions')}),\n-        ('Important dates', {'fields': ('last_login', 'date_joined')}),\n+    model = CustomUser\n+    fieldsets = UserAdmin.fieldsets + (\n+        ('Additional Info', {\n+            'fields': ('phone_number', 'profile_picture', 'gender')\n+        }),\n     )\n-    \n-    # Fields to display in the admin form when creating a new user\n-    add_fieldsets = (\n-        (None, {'fields': ('username', 'password1', 'password2')}),\n-        ('Personal info', {'fields': ('first_name', 'last_name', 'email', 'phone_number', 'gender', 'profile_picture')}),\n-        ('Permissions', {'fields': ('is_active', 'is_staff')}),\n+    add_fieldsets = UserAdmin.add_fieldsets + (\n+        ('Additional Info', {\n+            'fields': ('phone_number', 'profile_picture', 'gender')\n+        }),\n     )\n-    \n-    search_fields = ('username', 'email')\n-    ordering = ('username',)\n+    list_display = ['username', 'email', 'first_name', 'last_name', 'gender', 'phone_number']\n \n-# Register CustomUser model with the CustomUserAdmin\n admin.site.register(CustomUser, CustomUserAdmin)\n admin.site.register(BlogPost, BlogPostAdmin)\n admin.site.register(Comment, CommentAdmin)\n admin.site.unregister(Profile)  # Unregister if already registered\n"
                },
                {
                    "date": 1734986359552,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n     readonly_fields = ('created_at', 'updated_at')  # Prevent editing dates\n \n @admin.register(Profile)\n class ProfileAdmin(admin.ModelAdmin):\n-    list_display = ['user', 'avatar_display']  # Add avatar_display to list_display\n+    list_display = ['author', 'avatar_display']  # Add avatar_display to list_display\n \n     def avatar_display(self, obj):\n         if obj.avatar:\n             return format_html('<img src=\"{}\" width=\"50\" height=\"50\" style=\"border-radius: 50%;\" />', obj.avatar.url)\n"
                },
                {
                    "date": 1734986369496,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n     readonly_fields = ('created_at', 'updated_at')  # Prevent editing dates\n \n @admin.register(Profile)\n class ProfileAdmin(admin.ModelAdmin):\n-    list_display = ['author', 'avatar_display']  # Add avatar_display to list_display\n+    list_display = ['user', 'avatar_display']  # Add avatar_display to list_display\n \n     def avatar_display(self, obj):\n         if obj.avatar:\n             return format_html('<img src=\"{}\" width=\"50\" height=\"50\" style=\"border-radius: 50%;\" />', obj.avatar.url)\n"
                },
                {
                    "date": 1734988021343,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -81,6 +81,6 @@\n \n admin.site.register(CustomUser, CustomUserAdmin)\n admin.site.register(BlogPost, BlogPostAdmin)\n admin.site.register(Comment, CommentAdmin)\n-admin.site.unregister(Profile)  # Unregister if already registered\n+# admin.site.unregister(Profile)  # Unregister if already registered\n admin.site.register(Profile, ProfileAdmin)  # Re-register with the updated class\n"
                },
                {
                    "date": 1734988045443,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -81,6 +81,6 @@\n \n admin.site.register(CustomUser, CustomUserAdmin)\n admin.site.register(BlogPost, BlogPostAdmin)\n admin.site.register(Comment, CommentAdmin)\n-# admin.site.unregister(Profile)  # Unregister if already registered\n+admin.site.unregister(Profile)  # Unregister if already registered\n admin.site.register(Profile, ProfileAdmin)  # Re-register with the updated class\n"
                },
                {
                    "date": 1735429925145,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n from django.contrib import admin\n-from .models import BlogPost, BlogPostImage, Comment, Profile, CustomUser\n+from .models import BlogPost, BlogPostImage, Comment, CustomUser\n from .forms import BlogPostAdminForm\n from django.utils.html import format_html\n from django.contrib.auth.admin import UserAdmin\n from .models import CustomUser\n@@ -47,25 +47,21 @@\n     search_fields = ('blog_post__title', 'author__username', 'content')\n     list_filter = ('created_at', 'updated_at', 'author')\n     readonly_fields = ('created_at', 'updated_at')  # Prevent editing dates\n \n-@admin.register(Profile)\n-class ProfileAdmin(admin.ModelAdmin):\n-    list_display = ['user', 'avatar_display']  # Add avatar_display to list_display\n \n-    def avatar_display(self, obj):\n-        if obj.avatar:\n-            return format_html('<img src=\"{}\" width=\"50\" height=\"50\" style=\"border-radius: 50%;\" />', obj.avatar.url)\n-        return \"No Avatar\"\n-    avatar_display.short_description = 'Avatar'  # Set the column name in the admin interface\n-    \n-# Register models in the admin site\n+# # Profile Admin\n+# class ProfileAdmin(admin.ModelAdmin):\n+#     list_display = ['user', 'avatar_display']  # Add avatar_display to list_display\n \n+#     def avatar_display(self, obj):\n+#         if obj.avatar:\n+#             return format_html('<img src=\"{}\" width=\"50\" height=\"50\" style=\"border-radius: 50%;\" />', obj.avatar.url)\n+#         return \"No Avatar\"\n+#     avatar_display.short_description = 'Avatar'  # Set the column name in the admin interface\n \n \n \n-# admin.py\n-\n class CustomUserAdmin(UserAdmin):\n     model = CustomUser\n     fieldsets = UserAdmin.fieldsets + (\n         ('Additional Info', {\n@@ -76,11 +72,19 @@\n         ('Additional Info', {\n             'fields': ('phone_number', 'profile_picture', 'gender')\n         }),\n     )\n-    list_display = ['username', 'email', 'first_name', 'last_name', 'gender', 'phone_number']\n+    \n+    list_display = ['username', 'email', 'first_name', 'last_name', 'gender', 'phone_number', 'profile_picture_thumbnail']\n+    ordering = ['-date_joined']\n \n+\n+    def profile_picture_thumbnail(self, obj):\n+        if obj.profile_picture:\n+            return format_html('<img src=\"{}\" width=\"50\" height=\"50\" style=\"border-radius: 50%;\" />', obj.profile_picture.url)\n+        return \"No Picture\"\n+    profile_picture_thumbnail.short_description = 'Profile Picture'\n+\n+# Register the CustomUserAdmin\n admin.site.register(CustomUser, CustomUserAdmin)\n admin.site.register(BlogPost, BlogPostAdmin)\n admin.site.register(Comment, CommentAdmin)\n-admin.site.unregister(Profile)  # Unregister if already registered\n-admin.site.register(Profile, ProfileAdmin)  # Re-register with the updated class\n"
                }
            ],
            "date": 1734304065147,
            "name": "Commit-0",
            "content": "from django.contrib import admin\nfrom  .models import BlogPost, Comment\n# Register your models here.\n\n# BlogPost Admin Form\nclass BlogPostAdminForm(forms.ModelForm):\n    class Meta:\n        model = BlogPost\n        field = ['title', 'content', 'quote', 'image', 'video_url', 'author']\n        \n    # Additional fields for adding paragraphs dynamically\n    content_extra = forms.CharField(widget=forms.Textarea, required=False, label=\"Addition Paragraph\")\n    image_extra = forms.ImageField(required=False, lable=\"Additional Image\")\n    video_url_extra = forms.URLField(required=False, label=\"Additional Video URL\")\n    quote_extra = forms.CharField(widget=forms.Textarea, required=False, label=\"Quote\", help_text=\"This is optional.\")\n    \n    \n    # Override save method to include additional paragraphs, images, etc.\n    def save(self, commit=True):\n        blog_post = super().save(commit=False)\n        \n        \n        # Handle the additional content and media fields here\n        if commit:\n            blog_post.save()\n            \n        # Optionally, handle additional paragraphs, images, and videos here\n        \n        return blog_post\n    \n# BlogPostAdmin(admin.ModelAdmin):\nclass BlogPostAdmin(admin.ModelAdmin):\n    form = BlogPostAdminForm\n    list_display = ('title', 'author', 'created_at', 'updated_at')\n    search_fields = ('title', 'content')\n    list_filter = ('created_at')\n    \n    fieldsets = (\n        ('Main Info', {\n            'fields': ('title', 'content', 'quote', 'image', 'video_url', 'author')  \n        }),\n        ('Additional Options', {\n            'fields': ('content_extra', 'image_extra', 'video_url_extra', 'quote_extra'),\n            'classes': ('collapse',)\n        }),\n    )\n    \nadmin.site.register(BlogPost, BlogPostAdmin)\nadmin.site.register(Comment)"
        }
    ]
}